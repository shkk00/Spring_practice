/******************************************************************
 * Copyright RASTECH 2020
 ******************************************************************/
package kr.go.cris.ptl.mng.form.controller;
   
import java.io.IOException;
import java.io.Writer;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import kr.go.cris.base.controller.BaseController;
import kr.go.cris.commons.utils.ReqUtils;
import kr.go.cris.commons.utils.XmlUtil;
import kr.go.cris.ptl.mng.code.vo.MngCodeVo;
import kr.go.cris.ptl.mng.form.service.FormService;
import kr.go.cris.ptl.mng.form.vo.FormVo;
import kr.go.cris.ptl.mng.form.vo.WFormVo;
import kr.go.cris.ptl.mng.sch.vo.EtlMngVo;
import kr.go.cris.ptl.stats.vo.PTLStatAccessVo;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.github.mustachejava.PragmaHandler;



/**
 * <pre>
 * FileName: sysController.java
 * Package : kr.go.cris.ptl.mng.sys.controller
 * 
 * 시스템관리 컨트롤러
 *
 * </pre>
 * @author : sejin
 * @date   : 2016. 3. 22.
 */
@Controller
public class FormController extends BaseController {

	@Resource
	FormService formService;

	/**
	 * 
	 * @param request
	 * @param response
	 * @param ptlStatAccessVo
	 * @throws IOException
	 * @throws SQLException
	 * @throws NullPointerException
	 */
	@RequestMapping("/mng/form/listForm.do")
	public String agree(HttpServletRequest request, HttpServletResponse response, Model model)  throws IOException, SQLException , NullPointerException {
		
		model.addAttribute("form_cd",getCodeList("FORM_CD"));
		model.addAttribute("data_type",getCodeList("DATA_TYPE"));
		model.addAttribute("form_type",getCodeList("FORM_TYPE"));
		model.addAttribute("use_yn",getCodeList("USE_YN"));
		
		return "mng/form/listForm.tiles";
	}
	
	/**
	 * 
	 * @param request
	 * @param response
	 * @param ptlStatAccessVo
	 * @throws IOException
	 * @throws SQLException
	 * @throws NullPointerException
	 */
	@RequestMapping("/mng/form/selectFormList.do")
	public void selectFormList(HttpServletRequest request, HttpServletResponse response, Writer out)  throws IOException, SQLException , NullPointerException {
		
		Map<String, Object> params = ReqUtils.getParameterMap(request);
		
//		for(String key: params.keySet()){
////			String value = (String) params.get(key);
////			System.out.println("ket\t:\t"+key+", value\t:\t"+value);
//			System.out.println("ket\t:\t"+key);
//		}
		
		List<Map<String, Object>> list = formService.selectFormList(params);  // DATA_TYPE만...?
//		출력테스트
//		Iterator<Map<String, Object>> iterator = list.iterator();
//		while ( iterator.hasNext()) {
//			Map<String, Object> map = iterator.next();
//			Set<String> set = map.keySet();
//			Iterator<String> keyIterator  = set.iterator();
//			while(keyIterator.hasNext()){
//				String key = keyIterator.next();
//				System.out.println(map.get(key));
//			}
//			System.out.println();
//		}
		
		String xml = "";
    	if(list != null){
    		xml = XmlUtil.listMapToXml(list);
    	}
 	    
 	    response.setContentType("text/xml");
 	    response.setCharacterEncoding("UTF-8");
 	    response.setHeader("Cache-Control", "no-cache");
 	    response.setHeader("Pragma", "no-cache");
 	    response.setDateHeader("Expires", -1);

 	    out.write(xml);
 	    
 	    out.flush();
	}
	
	   
/**
 * <pre>
 *    etl 설정정보 저장
 * </pre>
 * @author :
 * @date   : 2015. . .
 * @param
 * @param
 * @return
* @throws java.text.ParseException 
 * @throws ParseException 
 * @throws NumberFormatException 
 * */
@RequestMapping(value="/mng/form/saveFormList.do")
public String saveEtlList(Model model, HttpServletRequest request)  throws IOException , SQLException , NullPointerException, NumberFormatException, java.text.ParseException {
		
		// 01. Request >> Map 객체로 전환
		Enumeration em = request.getParameterNames();

    String parameterName = (String)em.nextElement();

    JSONParser jsonParser = new JSONParser();
    // JSON데이터를 넣어 JSON Object 로 만들어 준다.
    JSONObject jsonObject = null;
		try {
			jsonObject = (JSONObject) jsonParser.parse(parameterName);
		} catch (ParseException e) {
			logger.debug("ERROR insertCdList ParseException");
		}
    // books의 배열을 추출
    JSONArray cdInfoArray = (JSONArray) jsonObject.get("list");

    FormVo formVo = null;
      
    List<FormVo> list = new ArrayList<FormVo>();
    for (int i = 0; i < cdInfoArray.size(); i++) {

       // 배열 안에 있는것도 JSON형식 이기 때문에 JSON Object 로 추출
       JSONObject cdObject = (JSONObject) cdInfoArray.get(i);
       // JSON name으로 추출
       formVo = new FormVo();
       formVo.setElmnt_id(String.valueOf(cdObject.get("elmnt_id")));
       formVo.setElmnt_nm(String.valueOf(cdObject.get("elmnt_nm")));
       formVo.setData_type(String.valueOf(cdObject.get("data_type")));
       formVo.setCd(String.valueOf(cdObject.get("cd")));
       formVo.setLbl_kor(String.valueOf(cdObject.get("lbl_kor")));
       formVo.setLbl_eng(String.valueOf(cdObject.get("lbl_eng")));
       formVo.setSave_type(String.valueOf(cdObject.get("save_type")));
       list.add(formVo);
    }// end for
    
    formService.saveFormList(list);
    
		return "redirect:/mng/sch/listSch.do";
	}
	
/**
 * 
 * @param request
 * @param response
 * @param ptlStatAccessVo
 * @throws IOException
 * @throws SQLException
 * @throws NullPointerException
 */
@RequestMapping("/mng/form/selectWrkFormList.do")
public void selectWrkFormList(HttpServletRequest request, HttpServletResponse response, Writer out)  throws IOException, SQLException , NullPointerException {
	
	Map<String, Object> params = ReqUtils.getParameterMap(request);
	List<Map<String, Object>> list = formService.selectWrkFormList(params);
	
	
	String xml = "";
	if(list != null){
		xml = XmlUtil.listMapToXml(list);
	}
	    
	    response.setContentType("text/xml");
	    response.setCharacterEncoding("UTF-8");
	    response.setHeader("Cache-Control", "no-cache");
	    response.setHeader("Pragma", "no-cache");
	    response.setDateHeader("Expires", -1);

	    out.write(xml);
	    
	    out.flush();
}

	/**
	 * 
	 * @param request
	 * @param response
	 * @param ptlStatAccessVo
	 * @throws IOException
	 * @throws SQLException
	 * @throws NullPointerException
	 */

//    shshshshsh
	@RequestMapping("/board/writeBoard.do")
	public String writeBoard(HttpServletRequest request, HttpServletResponse response, Model model)  throws IOException, SQLException , NullPointerException {
		String frm_id = request.getParameter("frm_id");
		String brd_seq = request.getParameter("brd_seq");
		
		Map<String,Object> params = new HashMap<String, Object>();
		
		List<Map<String, Object>> list = formService.selectFormList(params);
		
		
		Map<String, Object> map = null;
		for (int i = 0; i < list.size(); i++) {
			if("S".equals(list.get(i).get("DATA_TYPE"))){
				List<MngCodeVo> code =  getCodeList(list.get(i).get("CD").toString());
				String html = "<select name=\""+list.get(i).get("ELMNT_ID")+"\">";
				for (MngCodeVo mngCodeVo : code) {
					html += "<option value=\""+ mngCodeVo.getCd() +"\" >" + mngCodeVo.getCd_nm()+ "</option>";
				}
				html += "</select>";
				list.get(i).put("CD",html);
			}
		}
		model.addAttribute("list", list);
		model.addAttribute("frm_id", frm_id);
		model.addAttribute("brd_seq", brd_seq);
		
		return "mng/form/writeBoard.tiles";
	}

	@RequestMapping("/mng/form/selectBoardDetail.do")
	public void selectBoardDetail(HttpServletRequest request, HttpServletResponse response, Writer out, Model model)  throws IOException, SQLException , NullPointerException {
		String frm_idValue = request.getParameter("frm_id");
		String brd_seqValue = request.getParameter("brd_seq");
		
		Map<String,Object> params = new HashMap<String, Object>();
		params.put("lst_yn", "");
		params.put("frm_id", frm_idValue);
		params.put("brd_seq", brd_seqValue);
		
		
		List<Map<String, Object>> listCategory = formService.selecTheadFormList(params);
		List<Map<String, Object>> listDetail = formService.selectSubListBoard(params);
//		List<MngCodeVo> code = null;
		List<Map<String, Object>> newList = new ArrayList<Map<String,Object>>();
		
		for(Map<String, Object> detailMap : listDetail ){
			Map<String, Object> dataMap = new HashMap<String, Object>();
			for(String detailKey : detailMap.keySet()){
				String detailValue = String.valueOf(detailMap.get(detailKey));  //error : java.math.BigDecimal cannot be cast to java.lang.String

				//				brd_seq , frm_id , COL
				if(detailValue.equals(frm_idValue)){
					System.out.println("NB\t"+detailKey);
					dataMap.put(detailKey, detailValue);
				} else if(detailValue.equals(brd_seqValue)){
					dataMap.put(detailKey, detailValue);
				} else {
					for( Map<String, Object> listCtgrMap : listCategory){
						String columnValue = (String)listCtgrMap.get("FRM_COL");
						columnValue  = columnValue .toUpperCase();
						if(columnValue.equals(detailKey)){
							
							String html = "";
							String dataType = (String)listCtgrMap.get("DATA_TYPE");
							String elmntNm = (String)listCtgrMap.get("ELMNT_NM");
							
						  if ("T".equals(dataType)) {
							  html += "<label>"+elmntNm+"</label>&nbsp;&nbsp;";
							  html += "<input type=\"text\" id=\""+columnValue+"\" name=\""+columnValue+"\" value=\""+detailValue+"\"><br>";
							  dataMap.put(columnValue, html);
							} else if ("TA".equals(dataType)){
							  html += "<label>"+elmntNm+"</label>&nbsp;&nbsp;";
							  html += "<textarea id=\""+columnValue+"\" name=\""+columnValue+"\" >"+detailValue+"</textarea><br>";
							  dataMap.put(columnValue, html);
							} else if ("S".equals(dataType)){
								String cd = (String)listCtgrMap.get("CD");
								String elmntId = (String)listCtgrMap.get("ELMNT_ID");
								System.out.println("-------------------------------------");
								System.out.println("cd\t"+cd);  //DATA_TYPE
								System.out.println("elmntId\t"+elmntId); //구분
								System.out.println("detailValue\t"+detailValue);  //T
								
								
								List<MngCodeVo> getCdList = getCodeList(cd);
								html += "<label>"+elmntNm+"</label>&nbsp;&nbsp;";
								html += "<select id=\""+columnValue+"\" name=\""+columnValue+"\">";
								for(MngCodeVo getData : getCdList){
//									getCode의 cd가 같으면 cdNm으로 선택돼서 나가게
									String getCd = getData.getCd();
									String getCdNm = getData.getCd_nm();
//									System.out.println(getData);
									System.out.println("getCd\t"+getCd);
									System.out.println("getCdNm\t"+getCdNm);
									
									html += "<option  value=\""+getCd+"\"";
									if(detailValue.equals(getCd)) html += "=selected";
									html	+= ">"+getCdNm+"</option>";
									
								} 
								html += "</select><br>";
								dataMap.put(columnValue, html);
							}//  "s" check end
							
							System.out.println("--  html -- ");
							System.out.println(html);
						}
					} // for end
				} //else end
				
			} // detailKey for end
			newList.add(dataMap);
		}
		
		System.out.println("*~*~*~*~*~*~*~*~*~*~*~*~*~");
		for(Map<String, Object> map : newList){
			System.out.println(map);
		}
		
		
		
		
		
		
		
		
		String xml = "";
		if(newList != null){
			xml = XmlUtil.listMapToXml(newList);
		}
		    
		    response.setContentType("text/xml");
		    response.setCharacterEncoding("UTF-8");
		    response.setHeader("Cache-Control", "no-cache");
		    response.setHeader("Pragma", "no-cache");
		    response.setDateHeader("Expires", -1);

		    out.write(xml);
		    
		    out.flush();
	}
	
		/**
		 * <pre>
		 *    etl 설정정보 저장
		 * </pre>
		 * @author :
		 * @date   : 2015. . .
		 * @param
		 * @param
		 * @return
		* @throws java.text.ParseException 
		 * @throws ParseException 
		 * @throws NumberFormatException 
		 * */
		@RequestMapping(value="/mng/form/saveWrkFormList.do")
		public void saveWrkFormList(Model model, HttpServletRequest request)  throws IOException , SQLException , NullPointerException, NumberFormatException, java.text.ParseException {
				
				// 01. Request >> Map 객체로 전환
				Enumeration em = request.getParameterNames();

		    String parameterName = (String)em.nextElement();

		    JSONParser jsonParser = new JSONParser();
		    // JSON데이터를 넣어 JSON Object 로 만들어 준다.
		    JSONObject jsonObject = null;
				try {
					jsonObject = (JSONObject) jsonParser.parse(parameterName);
				} catch (ParseException e) {
					logger.debug("ERROR insertCdList ParseException");
				}
		    // books의 배열을 추출
		    JSONArray cdInfoArray = (JSONArray) jsonObject.get("list");

		    WFormVo WFormVo = null;
		      
		    List<WFormVo> list = new ArrayList<WFormVo>();
		    for (int i = 0; i < cdInfoArray.size(); i++) {

		       // 배열 안에 있는것도 JSON형식 이기 때문에 JSON Object 로 추출
		       JSONObject cdObject = (JSONObject) cdInfoArray.get(i);
		       // JSON name으로 추출
		       WFormVo = new WFormVo();
		       WFormVo.setFrm_id(String.valueOf(cdObject.get("frm_id")));
		       WFormVo.setFrm_gbn(String.valueOf(cdObject.get("frm_gbn")));
		       WFormVo.setFrm_etc(String.valueOf(cdObject.get("frm_etc")));
		       WFormVo.setUse_yn(String.valueOf(cdObject.get("use_yn")));
		       WFormVo.setSave_type(String.valueOf(cdObject.get("save_type")));

		       list.add(WFormVo);
		    }// end for
		    
		    formService.saveWrkFormList(list);
		    
		}
		
		
		@RequestMapping("/mng/form/selectWrkFormDtlList.do")
		public void selectWrkFormDtlList(HttpServletRequest request, HttpServletResponse response, Writer out)  throws IOException, SQLException , NullPointerException {
			
			Map<String, Object> params = ReqUtils.getParameterMap(request);
			List<Map<String, Object>> list = formService.selectWrkFormDtlList(params);
			String xml = "";
			if(list != null){
				xml = XmlUtil.listMapToXml(list);
			}
			    
			    response.setContentType("text/xml");
			    response.setCharacterEncoding("UTF-8");
			    response.setHeader("Cache-Control", "no-cache");
			    response.setHeader("Pragma", "no-cache");
			    response.setDateHeader("Expires", -1);

			    out.write(xml);
			    
			    out.flush();
		}	
		
		@RequestMapping(value="/mng/form/saveSubWrkFormList.do")
		public void saveSubWrkFormList(Model model, HttpServletRequest request)  throws IOException , SQLException , NullPointerException, NumberFormatException, java.text.ParseException {
				
			// 01. Request >> Map 객체로 전환
			Enumeration em = request.getParameterNames();

		    String parameterName = (String)em.nextElement();

		    JSONParser jsonParser = new JSONParser();
		    // JSON데이터를 넣어 JSON Object 로 만들어 준다.
		    JSONObject jsonObject = null;
				try {
					jsonObject = (JSONObject) jsonParser.parse(parameterName);
				} catch (ParseException e) {
					logger.debug("ERROR insertCdList ParseException");
				}
		    // books의 배열을 추출
		    JSONArray cdInfoArray = (JSONArray) jsonObject.get("list");

		    WFormVo WFormVo = null;
		      
		    List<WFormVo> list = new ArrayList<WFormVo>();
		    for (int i = 0; i < cdInfoArray.size(); i++) {

		       // 배열 안에 있는것도 JSON형식 이기 때문에 JSON Object 로 추출
		       JSONObject cdObject = (JSONObject) cdInfoArray.get(i);
		       // JSON name으로 추출
		       WFormVo = new WFormVo();
		       
		       WFormVo.setFrm_id(String.valueOf(cdObject.get("frm_id")));
		       WFormVo.setFrm_seq(String.valueOf(cdObject.get("frm_seq")));
		       WFormVo.setFrm_elmnt_id(String.valueOf(cdObject.get("frm_elmnt_id")));
		       WFormVo.setFrm_ord(String.valueOf(cdObject.get("frm_ord")));
		       WFormVo.setFrm_col(String.valueOf(cdObject.get("frm_col")));
		       WFormVo.setUse_yn(String.valueOf(cdObject.get("use_yn")));
		       WFormVo.setLst_yn(String.valueOf(cdObject.get("lst_yn")));
		       WFormVo.setSrch_yn(String.valueOf(cdObject.get("srch_yn")));
		       WFormVo.setSave_type(String.valueOf(cdObject.get("save_type")));
//		       여기서 MAP으로 한번에 하는게 좋음....
		       list.add(WFormVo);
		    }// end for
		    
		    formService.saveSubWrkForm(list);
		    
		}
		
		@RequestMapping("/board/listBoard.do")
		public String listBoard(HttpServletRequest request, HttpServletResponse response, Model model)  throws IOException, SQLException , NullPointerException {
//			String urlParam = request.getParameter("frm_id"); //url?뒤에 붙은 parameter 받는
//			화면용
			String frm_id = request.getParameter("frm_id"); 
	
			model.addAttribute("frm_id",frm_id);
			return "mng/form/writeBoard2.tiles";
		}

		
		@RequestMapping("/mng/form/selectTheadBoard.do")
		public void selectListBoard(HttpServletRequest request, HttpServletResponse response, Writer out, WFormVo wformVo)  throws IOException, SQLException , NullPointerException {
			
			Map<String, Object> params = ReqUtils.getParameterMap(request); 
		
			
			List<Map<String, Object>> list = formService.selecTheadFormList(params);
			
			
//			for(int i=0; i<list.size();i++){
//				String columnInfo = "";
//				String dataTypeInfo = "";
//				columnInfo  += (String)list.get(i).get("FRM_COL");
//				dataTypeInfo  = (String)list.get(i).get("FRM_COL");
//				dataTypeInfo += ","+list.get(i).get("DATA_TYPE");
//				dataTypeInfo  += ","+list.get(i).get("CD") +"/";
//				
//				list.get(i).put("dataType", dataTypeInfo);
//				list.get(i).put("columnInfo", columnInfo);
//			}
			
			
			int totalListCnt = formService.selectSubListBoardCnt(wformVo);		//later for pagination
			
			String xml = "";
			if(list != null){
				xml = XmlUtil.listMapToXml(list);
				
				/*
    			 * 총카운터 세팅
    			 */
    	    	StringBuffer sb = new StringBuffer();
    	    	String[] str = xml.split("<items>");
    	    	
    	    	sb.append(str[0]);
    	    	sb.append("<items>");
    	    	sb.append("<totalPageCnt>"+(int)Math.ceil((double)totalListCnt/(double)20)+"</totalPageCnt>\n");    	 
    	    	sb.append("<totalListCnt>"+totalListCnt+"</totalListCnt>\n");
    	    	sb.append(str[1]);
    	    	
    	    	xml = sb.toString();
			}
			    
			    response.setContentType("text/xml");
			    response.setCharacterEncoding("UTF-8");
			    response.setHeader("Cache-Control", "no-cache");
			    response.setHeader("Pragma", "no-cache");
			    response.setDateHeader("Expires", -1);

			    out.write(xml);
			    
			    out.flush();
		}	
		
		
		@RequestMapping("/mng/form/selectTbodyBoard.do")
		public void selectSubListBoard(HttpServletRequest request, HttpServletResponse response, Writer out, Model model)  throws IOException, SQLException , NullPointerException {
			
			Map<String, Object> params = ReqUtils.getParameterMap(request);
			params.put("lst_yn", "Y");  //thead에서 해서  ajax로 연결성 가진게...기능상 좋을 듯
           List<Map<String, Object>> listCd = formService.selecTheadFormList(params);
           List<Map<String, Object>> list = formService.selectSubListBoard(params);
           
           List<MngCodeVo> code = null;
           
//           Map<String, Object> columnInfo  = new LinkedHashMap<String, Object>();
           Map<String, Object> dataType_cdNm = null;
           List colNm = new ArrayList(); // 컬럼명 순서대로 넣기
            		
       		
       		List<Map<String, Object>> newListCd = new ArrayList<Map<String,Object>>(); //add
       		
       		for(Map<String, Object> shiftMap : listCd){
       			Map<String, Object>  dataMap = new HashMap<String, Object>();  //null is error?
       			dataMap.put("frm_col", shiftMap.get("FRM_COL"));
       			dataMap.put("elmnt_id", shiftMap.get("ELMNT_ID"));
       			dataMap.put("data_type", shiftMap.get("DATA_TYPE"));
       			dataMap.put("cd", shiftMap.get("CD"));
       			newListCd.add(dataMap);
       		}
       		
       		
       		List<Map<String, Object>> newList = new ArrayList<Map<String,Object>>();
       		
       		for (Map<String, Object> listMap : list){
       			Map<String, Object>  dataMap = new HashMap<String, Object>();
       			for( String key : listMap.keySet()){
       				
       				if(key.equals("BRD_SEQ")){   // == no
       					
       					dataMap.put(key, listMap.get(key));
       				}
//       			  COL 부분
       				for (Map<String, Object> cdListMap : newListCd){
       					String cdListStr = (String)cdListMap.get("frm_col");
       					cdListStr = cdListStr.toUpperCase();
       					
       					if(key.equals(cdListStr)){
       						
       						String data_type = (String)cdListMap.get("data_type");
       						
       						if("S".equals(data_type)){
       							String listValue = (String)listMap.get(key);
       							String cdListCd = (String)cdListMap.get("cd");
       							
       							code = getCodeList(cdListCd);
       							for(int j =0 ; j<code.size(); j++){
       								String cdNm = code.get(j).getCd_nm();
       								String mngCd = code.get(j).getCd();
       								
       								if(listValue.equals(mngCd)){
       									dataMap.put(key, cdNm);
       								}
       							} //code for end
       						}  // data_type =S 추가
       						else {
       							dataMap.put(key, listMap.get(key));
							}
       					}
       				}  //  COL 부분 end
       				
       			}
       			newList.add(dataMap);
       		}

//			for (Map<String, Object> thisMap : newList ){
//				System.out.println("----------------------------");
//				System.out.println(thisMap);
//			}

					
			String xml = "";
			if(newList != null){
				xml = XmlUtil.listMapToXml(newList);
			}
			    
			    response.setContentType("text/xml");
			    response.setCharacterEncoding("UTF-8");
			    response.setHeader("Cache-Control", "no-cache");
			    response.setHeader("Pragma", "no-cache");
			    response.setDateHeader("Expires", -1);

			    out.write(xml);
			    
			    out.flush();
		}	
		
		
////		sjsj
//		@RequestMapping("/mng/form/listBoard.do")
//		public String listBoard(HttpServletRequest request, HttpServletResponse response, Model model)  throws IOException, SQLException , NullPointerException {
////			String urlParam = request.getParameter("frm_id"); //url?뒤에 붙은 parameter 받는
//			Map<String,Object> params = new HashMap<String, Object>();// 이대로 들어가면 빈 값
//
//			List<Map<String, Object>> list = formService.selectFormList(params);
//			
////		출력테스트_sh
//		System.out.println("#####################");
//		Iterator<Map<String, Object>> iterator = list.iterator();
//		while ( iterator.hasNext()) {
//			Map<String, Object> map = iterator.next();
//			Set<String> set = map.keySet();
//			Iterator<String> keyIterator  = set.iterator();
//			while(keyIterator.hasNext()){
//				String key = keyIterator.next();
//				System.out.println(map.get(key));
//			}
//			System.out.println();
//		}
//			
//			Map<String, Object> map = null;
//			for (int i = 0; i < list.size(); i++) {
//				if("S".equals(list.get(i).get("DATA_TYPE"))){
//					List<MngCodeVo> code =  getCodeList(list.get(i).get("CD").toString());
//					String html = "<select name=\""+list.get(i).get("ELMNT_ID")+"\">";
//					for (MngCodeVo mngCodeVo : code) {
//						html += "<option value=\""+ mngCodeVo.getCd() +"\" >" + mngCodeVo.getCd_nm()+ "</option>";
//					}
//					html += "</select>";
//					list.get(i).put("CD",html);
//				}
//			}
//			model.addAttribute("list", list);
//			return "mng/form/writeBoard.tiles";
//		}
}
