/******************************************************************
 * Copyright RASTECH 2020
 ******************************************************************/
package kr.go.cris.ptl.mng.form.controller;
   
import java.io.IOException;
import java.io.Writer;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import kr.go.cris.base.controller.BaseController;
import kr.go.cris.commons.utils.ReqUtils;
import kr.go.cris.commons.utils.XmlUtil;
import kr.go.cris.ptl.mng.code.vo.MngCodeVo;
import kr.go.cris.ptl.mng.form.service.FormService;
import kr.go.cris.ptl.mng.form.vo.FormVo;
import kr.go.cris.ptl.mng.form.vo.WFormVo;
import kr.go.cris.ptl.mng.sch.vo.EtlMngVo;
import kr.go.cris.ptl.stats.vo.PTLStatAccessVo;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;



/**
 * <pre>
 * FileName: sysController.java
 * Package : kr.go.cris.ptl.mng.sys.controller
 * 
 * 시스템관리 컨트롤러
 *
 * </pre>
 * @author : sejin
 * @date   : 2016. 3. 22.
 */
@Controller
public class FormController extends BaseController {

	@Resource
	FormService formService;

	/**
	 * 
	 * @param request
	 * @param response
	 * @param ptlStatAccessVo
	 * @throws IOException
	 * @throws SQLException
	 * @throws NullPointerException
	 */
	@RequestMapping("/mng/form/listForm.do")
	public String agree(HttpServletRequest request, HttpServletResponse response, Model model)  throws IOException, SQLException , NullPointerException {
		
		model.addAttribute("form_cd",getCodeList("FORM_CD"));
		model.addAttribute("data_type",getCodeList("DATA_TYPE"));
		model.addAttribute("form_type",getCodeList("FORM_TYPE"));
		model.addAttribute("use_yn",getCodeList("USE_YN"));
		
		return "mng/form/listForm.tiles";
	}
	
	/**
	 * 
	 * @param request
	 * @param response
	 * @param ptlStatAccessVo
	 * @throws IOException
	 * @throws SQLException
	 * @throws NullPointerException
	 */
	@RequestMapping("/mng/form/selectFormList.do")
	public void selectFormList(HttpServletRequest request, HttpServletResponse response, Writer out)  throws IOException, SQLException , NullPointerException {
		
		Map<String, Object> params = ReqUtils.getParameterMap(request);
		
		System.out.println("  ##########################  shshsh   formcontroller ");
//		for(String key: params.keySet()){
////			String value = (String) params.get(key);
////			System.out.println("ket\t:\t"+key+", value\t:\t"+value);
//			System.out.println("ket\t:\t"+key);
//		}
		
		List<Map<String, Object>> list = formService.selectFormList(params);  // DATA_TYPE만...?
//		출력테스트
//		Iterator<Map<String, Object>> iterator = list.iterator();
//		while ( iterator.hasNext()) {
//			Map<String, Object> map = iterator.next();
//			Set<String> set = map.keySet();
//			Iterator<String> keyIterator  = set.iterator();
//			while(keyIterator.hasNext()){
//				String key = keyIterator.next();
//				System.out.println(map.get(key));
//			}
//			System.out.println();
//		}
		
		String xml = "";
    	if(list != null){
    		xml = XmlUtil.listMapToXml(list);
    	}
 	    
 	    response.setContentType("text/xml");
 	    response.setCharacterEncoding("UTF-8");
 	    response.setHeader("Cache-Control", "no-cache");
 	    response.setHeader("Pragma", "no-cache");
 	    response.setDateHeader("Expires", -1);

 	    out.write(xml);
 	    
 	    out.flush();
	}
	
	   
/**
 * <pre>
 *    etl 설정정보 저장
 * </pre>
 * @author :
 * @date   : 2015. . .
 * @param
 * @param
 * @return
* @throws java.text.ParseException 
 * @throws ParseException 
 * @throws NumberFormatException 
 * */
@RequestMapping(value="/mng/form/saveFormList.do")
public String saveEtlList(Model model, HttpServletRequest request)  throws IOException , SQLException , NullPointerException, NumberFormatException, java.text.ParseException {
		
		// 01. Request >> Map 객체로 전환
		Enumeration em = request.getParameterNames();

    String parameterName = (String)em.nextElement();

    JSONParser jsonParser = new JSONParser();
    // JSON데이터를 넣어 JSON Object 로 만들어 준다.
    JSONObject jsonObject = null;
		try {
			jsonObject = (JSONObject) jsonParser.parse(parameterName);
		} catch (ParseException e) {
			logger.debug("ERROR insertCdList ParseException");
		}
    // books의 배열을 추출
    JSONArray cdInfoArray = (JSONArray) jsonObject.get("list");

    FormVo formVo = null;
      
    List<FormVo> list = new ArrayList<FormVo>();
    for (int i = 0; i < cdInfoArray.size(); i++) {

       // 배열 안에 있는것도 JSON형식 이기 때문에 JSON Object 로 추출
       JSONObject cdObject = (JSONObject) cdInfoArray.get(i);
       // JSON name으로 추출
       formVo = new FormVo();
       formVo.setElmnt_id(String.valueOf(cdObject.get("elmnt_id")));
       formVo.setElmnt_nm(String.valueOf(cdObject.get("elmnt_nm")));
       formVo.setData_type(String.valueOf(cdObject.get("data_type")));
       formVo.setCd(String.valueOf(cdObject.get("cd")));
       formVo.setLbl_kor(String.valueOf(cdObject.get("lbl_kor")));
       formVo.setLbl_eng(String.valueOf(cdObject.get("lbl_eng")));
       formVo.setSave_type(String.valueOf(cdObject.get("save_type")));
       list.add(formVo);
    }// end for
    
    formService.saveFormList(list);
    
		return "redirect:/mng/sch/listSch.do";
	}
	
/**
 * 
 * @param request
 * @param response
 * @param ptlStatAccessVo
 * @throws IOException
 * @throws SQLException
 * @throws NullPointerException
 */
@RequestMapping("/mng/form/selectWrkFormList.do")
public void selectWrkFormList(HttpServletRequest request, HttpServletResponse response, Writer out)  throws IOException, SQLException , NullPointerException {
	
	Map<String, Object> params = ReqUtils.getParameterMap(request);
	List<Map<String, Object>> list = formService.selectWrkFormList(params);
	
	
	String xml = "";
	if(list != null){
		xml = XmlUtil.listMapToXml(list);
	}
	    
	    response.setContentType("text/xml");
	    response.setCharacterEncoding("UTF-8");
	    response.setHeader("Cache-Control", "no-cache");
	    response.setHeader("Pragma", "no-cache");
	    response.setDateHeader("Expires", -1);

	    out.write(xml);
	    
	    out.flush();
}

	/**
	 * 
	 * @param request
	 * @param response
	 * @param ptlStatAccessVo
	 * @throws IOException
	 * @throws SQLException
	 * @throws NullPointerException
	 */

//    shshshshsh
	@RequestMapping("/board/writeBoard.do")
	public String writeBoard(HttpServletRequest request, HttpServletResponse response, Model model)  throws IOException, SQLException , NullPointerException {
		String frm_id = request.getParameter("frm_id");
		String brd_seq = request.getParameter("brd_seq");
		
		Map<String,Object> params = new HashMap<String, Object>();

		params.put("frm_id", frm_id);
		
		
		List<Map<String, Object>> list = formService.selectChckBd(params); 
		
		String[] lst_ynColNmArr = new String[list.size()];
		String[] language_krArr = new String[list.size()];
 
		for(int i=0 ; i<list.size() ; i++){
	
//			System.out.println(" col "+list.get(i).get("FRM_COL"));
			
			String tmp = (String) list.get(i).get("FRM_COL"); //값
			String language_kr = (String) list.get(i).get("LBL_KOR"); //값
			lst_ynColNmArr[i] = tmp.toUpperCase();
			language_krArr [i] = language_kr;
		}
		
		params.put("brd_seq", brd_seq);
		List<Map<String, Object>> listDtail = formService.selectSubListBdDtail(params);  
		
//		해당 컬럼만 추가
		
//		System.out.println("size\t"+listDtail.size());
//		for(int j=0 ; j < listDtail.size() ; j++){
//			for(String colNm : lst_ynColNmArr){
////				System.out.println(listDtail.get(j).get(colNm));
//				String tmp = (String) listDtail.get(j).get(colNm);
//				listDtail.get(j).put(colNm,tmp);
//			}
//			System.out.println("-------------------------");
//			System.out.println(listDtail.get(j));
//		}
//		for (String lbl_kor : language_krArr){
//			listDtail.put("LBL_KOR", lbl_kor);
//		}

		for(Map test:listDtail) {
			System.out.println(" ~~~~~~~~~~~~~~~~~~~~~~ `");
			System.out.println("test\t"+test);
		}
		
//		언어 리스트 추가
		
		
//	출력테스트_sh
	System.out.println("#####################");
	Iterator<Map<String, Object>> iterator = listDtail.iterator();
	while ( iterator.hasNext()) {
		Map<String, Object> map2 = iterator.next();
		
		for (String lbl : language_krArr){
			map2.put("LBL_KOR", lbl);
		}
		
	}
	
	
	for(Map test : listDtail){
		System.out.println("------------------------????--------------");
		System.out.println(test);
	}
	
////출력테스트_sh
//System.out.println("#####################");
//Iterator<Map<String, Object>> iterator2 = list.iterator();
//while ( iterator2.hasNext()) {
//	Map<String, Object> map = iterator2.next();
//	Set<String> set = map.keySet();
//	Iterator<String> keyIterator  = set.iterator();
//	while(keyIterator.hasNext()){
//		String key = keyIterator.next();
////		System.out.println(map.get(key));
//		System.out.println(key);
//	}
//	System.out.println();
//}
		
		
		
		
		
//		for( Map test : listDtail){
//			System.out.println("test\t"+test);
//			if (test.get("COL1")!=null || !test.get("COL1").equals("") ){
//				System.out.println("yesy");
//			}
//		}
		
		Map<String, Object> map = null;
		for (int i = 0; i < listDtail.size(); i++) {
			if("S".equals(listDtail.get(i).get("COL2"))){
				List<MngCodeVo> code =  getCodeList(listDtail.get(i).get("CD").toString());
				String html = "<select name=\""+listDtail.get(i).get("ELMNT_ID")+"\">";
				for (MngCodeVo mngCodeVo : code) {
					html += "<option value=\""+ mngCodeVo.getCd() +"\" >" + mngCodeVo.getCd_nm()+ "</option>";
				}
				html += "</select>";
				listDtail.get(i).put("CD",html);
			}
		}
		
		
		
		
//		Map<String, Object> map = null;
//		for (int i = 0; i < list.size(); i++) {
//			if("S".equals(list.get(i).get("DATA_TYPE"))){
//				List<MngCodeVo> code =  getCodeList(list.get(i).get("CD").toString());
//				String html = "<select name=\""+list.get(i).get("ELMNT_ID")+"\">";
//				for (MngCodeVo mngCodeVo : code) {
//					html += "<option value=\""+ mngCodeVo.getCd() +"\" >" + mngCodeVo.getCd_nm()+ "</option>";
//				}
//				html += "</select>";
//				list.get(i).put("CD",html);
//			}
//		}
		model.addAttribute("listDtail", listDtail);
		return "mng/form/writeBoard.tiles";
	}

		/**
		 * <pre>
		 *    etl 설정정보 저장
		 * </pre>
		 * @author :
		 * @date   : 2015. . .
		 * @param
		 * @param
		 * @return
		* @throws java.text.ParseException 
		 * @throws ParseException 
		 * @throws NumberFormatException 
		 * */
		@RequestMapping(value="/mng/form/saveWrkFormList.do")
		public void saveWrkFormList(Model model, HttpServletRequest request)  throws IOException , SQLException , NullPointerException, NumberFormatException, java.text.ParseException {
				
				// 01. Request >> Map 객체로 전환
				Enumeration em = request.getParameterNames();

		    String parameterName = (String)em.nextElement();

		    JSONParser jsonParser = new JSONParser();
		    // JSON데이터를 넣어 JSON Object 로 만들어 준다.
		    JSONObject jsonObject = null;
				try {
					jsonObject = (JSONObject) jsonParser.parse(parameterName);
				} catch (ParseException e) {
					logger.debug("ERROR insertCdList ParseException");
				}
		    // books의 배열을 추출
		    JSONArray cdInfoArray = (JSONArray) jsonObject.get("list");

		    WFormVo WFormVo = null;
		      
		    List<WFormVo> list = new ArrayList<WFormVo>();
		    for (int i = 0; i < cdInfoArray.size(); i++) {

		       // 배열 안에 있는것도 JSON형식 이기 때문에 JSON Object 로 추출
		       JSONObject cdObject = (JSONObject) cdInfoArray.get(i);
		       // JSON name으로 추출
		       WFormVo = new WFormVo();
		       WFormVo.setFrm_id(String.valueOf(cdObject.get("frm_id")));
		       WFormVo.setFrm_gbn(String.valueOf(cdObject.get("frm_gbn")));
		       WFormVo.setFrm_etc(String.valueOf(cdObject.get("frm_etc")));
		       WFormVo.setUse_yn(String.valueOf(cdObject.get("use_yn")));
		       WFormVo.setSave_type(String.valueOf(cdObject.get("save_type")));

		       list.add(WFormVo);
		    }// end for
		    
		    formService.saveWrkFormList(list);
		    
		}
		
		
		@RequestMapping("/mng/form/selectWrkFormDtlList.do")
		public void selectWrkFormDtlList(HttpServletRequest request, HttpServletResponse response, Writer out)  throws IOException, SQLException , NullPointerException {
			
			Map<String, Object> params = ReqUtils.getParameterMap(request);
			List<Map<String, Object>> list = formService.selectWrkFormDtlList(params);
			String xml = "";
			if(list != null){
				xml = XmlUtil.listMapToXml(list);
			}
			    
			    response.setContentType("text/xml");
			    response.setCharacterEncoding("UTF-8");
			    response.setHeader("Cache-Control", "no-cache");
			    response.setHeader("Pragma", "no-cache");
			    response.setDateHeader("Expires", -1);

			    out.write(xml);
			    
			    out.flush();
		}	
		
		@RequestMapping(value="/mng/form/saveSubWrkFormList.do")
		public void saveSubWrkFormList(Model model, HttpServletRequest request)  throws IOException , SQLException , NullPointerException, NumberFormatException, java.text.ParseException {
				
			// 01. Request >> Map 객체로 전환
			Enumeration em = request.getParameterNames();

		    String parameterName = (String)em.nextElement();

		    JSONParser jsonParser = new JSONParser();
		    // JSON데이터를 넣어 JSON Object 로 만들어 준다.
		    JSONObject jsonObject = null;
				try {
					jsonObject = (JSONObject) jsonParser.parse(parameterName);
				} catch (ParseException e) {
					logger.debug("ERROR insertCdList ParseException");
				}
		    // books의 배열을 추출
		    JSONArray cdInfoArray = (JSONArray) jsonObject.get("list");

		    WFormVo WFormVo = null;
		      
		    List<WFormVo> list = new ArrayList<WFormVo>();
		    for (int i = 0; i < cdInfoArray.size(); i++) {

		       // 배열 안에 있는것도 JSON형식 이기 때문에 JSON Object 로 추출
		       JSONObject cdObject = (JSONObject) cdInfoArray.get(i);
		       // JSON name으로 추출
		       WFormVo = new WFormVo();
		       
		       WFormVo.setFrm_id(String.valueOf(cdObject.get("frm_id")));
		       WFormVo.setFrm_seq(String.valueOf(cdObject.get("frm_seq")));
		       WFormVo.setFrm_elmnt_id(String.valueOf(cdObject.get("frm_elmnt_id")));
		       WFormVo.setFrm_ord(String.valueOf(cdObject.get("frm_ord")));
		       WFormVo.setFrm_col(String.valueOf(cdObject.get("frm_col")));
		       WFormVo.setUse_yn(String.valueOf(cdObject.get("use_yn")));
		       WFormVo.setLst_yn(String.valueOf(cdObject.get("lst_yn")));
		       WFormVo.setSrch_yn(String.valueOf(cdObject.get("srch_yn")));
		       WFormVo.setSave_type(String.valueOf(cdObject.get("save_type")));
//		       여기서 MAP으로 한번에 하는게 좋음....
		       list.add(WFormVo);
		    }// end for
		    
		    formService.saveSubWrkForm(list);
		    
		}
		
		@RequestMapping("/board/listBoard.do")
		public String listBoard(HttpServletRequest request, HttpServletResponse response, Model model)  throws IOException, SQLException , NullPointerException {
//			String urlParam = request.getParameter("frm_id"); //url?뒤에 붙은 parameter 받는
//			화면용
			String frm_id = request.getParameter("frm_id"); 
	
				//  모든 brd_seq에 해당되는 모든 컬럼 조회후 위의 컬럼만 화면으로 보내
				//   + data_type에 따른 value, 그외 use_yn보여줘야
				
//				List<Map<String, Object>> list = formService.selecTopFormList(params);
				

			model.addAttribute("frm_id",frm_id);
			return "mng/form/writeBoard2.tiles";
		}

		
		@RequestMapping("/mng/form/selectTheadBoard.do")
		public void selectListBoard(HttpServletRequest request, HttpServletResponse response, Writer out, WFormVo wformVo)  throws IOException, SQLException , NullPointerException {
			
			Map<String, Object> params = ReqUtils.getParameterMap(request); 
		
			
			List<Map<String, Object>> list = formService.selecTheadFormList(params);
			
			
//			for(int i=0; i<list.size();i++){
//				String columnInfo = "";
//				String dataTypeInfo = "";
//				columnInfo  += (String)list.get(i).get("FRM_COL");
//				dataTypeInfo  = (String)list.get(i).get("FRM_COL");
//				dataTypeInfo += ","+list.get(i).get("DATA_TYPE");
//				dataTypeInfo  += ","+list.get(i).get("CD") +"/";
//				
//				list.get(i).put("dataType", dataTypeInfo);
//				list.get(i).put("columnInfo", columnInfo);
//			}
			
			
			int totalListCnt = formService.selectSubListBoardCnt(wformVo);		//later for pagination
			
			String xml = "";
			if(list != null){
				xml = XmlUtil.listMapToXml(list);
				
				/*
    			 * 총카운터 세팅
    			 */
    	    	StringBuffer sb = new StringBuffer();
    	    	String[] str = xml.split("<items>");
    	    	
    	    	sb.append(str[0]);
    	    	sb.append("<items>");
    	    	sb.append("<totalPageCnt>"+(int)Math.ceil((double)totalListCnt/(double)20)+"</totalPageCnt>\n");    	 
    	    	sb.append("<totalListCnt>"+totalListCnt+"</totalListCnt>\n");
    	    	sb.append(str[1]);
    	    	
    	    	xml = sb.toString();
			}
			    
			    response.setContentType("text/xml");
			    response.setCharacterEncoding("UTF-8");
			    response.setHeader("Cache-Control", "no-cache");
			    response.setHeader("Pragma", "no-cache");
			    response.setDateHeader("Expires", -1);

			    out.write(xml);
			    
			    out.flush();
		}	
		
		
		@RequestMapping("/mng/form/selectTbodyBoard.do")
		public void selectSubListBoard(HttpServletRequest request, HttpServletResponse response, Writer out, Model model)  throws IOException, SQLException , NullPointerException {
			
			Map<String, Object> params = ReqUtils.getParameterMap(request);
			
           List<Map<String, Object>> listCd = formService.selecTheadFormList(params);
			
           List<MngCodeVo> code = null;
           
//           Map<String, Object> columnInfo  = new LinkedHashMap<String, Object>();
           Map<String, Object> dataType_cdNm = null;
           List colNm = new ArrayList(); // 컬럼명 순서대로 넣기
            		
       		
       		List<Map<String, Object>> cdList = new ArrayList<Map<String,Object>>(); //add
       		
       		for(Map<String, Object> shiftMap : listCd){
       			Map<String, Object>  dataMap = new HashMap<String, Object>();  //null is error?
       			dataMap.put("frm_col", shiftMap.get("FRM_COL"));
       			dataMap.put("elmnt_id", shiftMap.get("ELMNT_ID"));
       			dataMap.put("data_type", shiftMap.get("DATA_TYPE"));
       			dataMap.put("cd", shiftMap.get("CD"));
       			cdList.add(dataMap);
       		}
       		
       		List<MngCodeVo> codeList = null;
       		
       		List<Map<String, Object>> newList = new ArrayList<Map<String,Object>>(); //add
       		Map<String, Object>  dataMap = new HashMap<String, Object>(); 
       		Iterator<Map<String, Object>> bodyIterator = cdList.iterator(); 
       		while(bodyIterator.hasNext()){
       			Map<String, Object> bodyMap = bodyIterator.next();
       			
       			for(String bodyKey : bodyMap.keySet()){
       				
       				if (bodyKey =="data_type" ){
       					
       					if("S".equals(bodyMap.get(bodyKey))){
//       						Map<String, Object>  dataMap = new HashMap<String, Object>(); 
       						String html = "";
       						String frm_col = (String)bodyMap.get("frm_col");
       						frm_col = frm_col.toUpperCase();
       						String elmnt_id = (String)bodyMap.get("elmnt_id");
       						String cd = (String)bodyMap.get("cd");
       						code = getCodeList(cd);
       							html += "<select name=\" "+frm_col+" \">";
       							for(int j =0 ; j<code.size(); j++){
       								String cdNm = code.get(j).getCd_nm();
       								html += "<option name=\""+elmnt_id+" \">"+cdNm+"</option>";
       							}
       							html += "</select>";
       							
       							dataMap.put(frm_col, html);
       							newList.add(dataMap);
       					}
       				} //if end
       			}  //for end
       		}  //while
       		
       		System.out.println("==================================");
       		for (Map<String, Object> map : newList){
       			System.out.println(map);
       		}
       		
       													
//				 List<Map<String, Object>> list = formService.selectSubListBoard(params);
//       		
//						 for(String mapKey : dataMap.keySet()){
//								 for(int i = 0 ; i<list.size() ; i++){
//									 System.out.println("------------------------------------------------");
//									 System.out.println(list.get(i).get(mapKey));
//								 }
//						 }
						
//						 System.out.println(dataMap.get(listKey));
			

					
			String xml = "";
			if(list != null){
				xml = XmlUtil.listMapToXml(list);
			}
			    
			    response.setContentType("text/xml");
			    response.setCharacterEncoding("UTF-8");
			    response.setHeader("Cache-Control", "no-cache");
			    response.setHeader("Pragma", "no-cache");
			    response.setDateHeader("Expires", -1);

			    out.write(xml);
			    
			    out.flush();
		}	
		
		
////		sjsj
//		@RequestMapping("/mng/form/listBoard.do")
//		public String listBoard(HttpServletRequest request, HttpServletResponse response, Model model)  throws IOException, SQLException , NullPointerException {
////			String urlParam = request.getParameter("frm_id"); //url?뒤에 붙은 parameter 받는
//			Map<String,Object> params = new HashMap<String, Object>();// 이대로 들어가면 빈 값
//
//			List<Map<String, Object>> list = formService.selectFormList(params);
//			
////		출력테스트_sh
//		System.out.println("#####################");
//		Iterator<Map<String, Object>> iterator = list.iterator();
//		while ( iterator.hasNext()) {
//			Map<String, Object> map = iterator.next();
//			Set<String> set = map.keySet();
//			Iterator<String> keyIterator  = set.iterator();
//			while(keyIterator.hasNext()){
//				String key = keyIterator.next();
//				System.out.println(map.get(key));
//			}
//			System.out.println();
//		}
//			
//			Map<String, Object> map = null;
//			for (int i = 0; i < list.size(); i++) {
//				if("S".equals(list.get(i).get("DATA_TYPE"))){
//					List<MngCodeVo> code =  getCodeList(list.get(i).get("CD").toString());
//					String html = "<select name=\""+list.get(i).get("ELMNT_ID")+"\">";
//					for (MngCodeVo mngCodeVo : code) {
//						html += "<option value=\""+ mngCodeVo.getCd() +"\" >" + mngCodeVo.getCd_nm()+ "</option>";
//					}
//					html += "</select>";
//					list.get(i).put("CD",html);
//				}
//			}
//			model.addAttribute("list", list);
//			return "mng/form/writeBoard.tiles";
//		}
}
