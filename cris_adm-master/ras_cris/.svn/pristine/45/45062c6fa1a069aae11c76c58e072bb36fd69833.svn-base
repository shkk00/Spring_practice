package kr.go.cris.commons.login.controller;

import java.io.IOException;
import java.security.PrivateKey;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import kr.go.cris.base.controller.BaseController;
import kr.go.cris.commons.constants.Constants;
import kr.go.cris.commons.login.service.LoginService;
import kr.go.cris.commons.utils.CryptoUtil;
import kr.go.cris.ptl.mng.code.service.MngCodeService;
import kr.go.cris.ptl.mng.code.vo.MngCodeVo;
import kr.go.cris.ptl.mng.user.service.MngUserService;
import kr.go.cris.ptl.mng.user.vo.MngUserAuthVo;
import kr.go.cris.ptl.mng.user.vo.MngUserClsVo;
import kr.go.cris.ptl.mng.user.vo.PTLLoginVo;

import org.apache.commons.lang3.StringUtils;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.support.RequestContextUtils;

/**
 * <pre>
 * FileName: LoginController.java
 * Package : kr.go.cris.commons.login.controller
 * 로그인 관리 - controller
 * 
 *
 * </pre>
 * @author : sejin
 * @date   : 2016. 2. 22.
 */
@Controller("loginController")
public class LoginController extends BaseController {

    @Resource
    private LoginService loginService;

    @Resource
    private MngUserService mngUserService;
    
    @Resource
    private MngCodeService mngCodeService;
    
	/**
	 * <pre>
	 * 사용자관리 - 사용자등록RSA키생성
	 *
	 * </pre>
	 * @author : sejin
	 * @date   : 2016. 2. 24.
	 * @param PTLLoginVo
	 * @param session
	 * @param model
	 * @return
	 * @throws IOException, SQLException , NullPointerException
	 */
	@RequestMapping(value="/login/register.do", produces="application/text; charset=utf-8", method=RequestMethod.POST)
	@ResponseBody
	public String insertUser(PTLLoginVo pTLLoginVo, HttpSession session, Model model,HttpServletRequest request)  throws IOException, SQLException , NullPointerException , InvalidCipherTextException {
		
		List<String> list;
		MngUserClsVo mngUserClsVo;
	
		// 개인키를 세션에서 가져온다
		PrivateKey privateKey = (PrivateKey) session.getAttribute(Constants.RSA_KEY_REGI);
		if (privateKey == null) return "잘못된 접근을 하셨습니다.";
		
		// session에서 개인키 삭제
		session.removeAttribute(Constants.RSA_KEY_REGI);
		
		// 클라이언트(WEB)에서 받은 데이터(RSA암호화)를 복호화한다.
		pTLLoginVo.decryptRSA(privateKey);

		String loginid = pTLLoginVo.getLoginid();
		
		String result = "등록 하신 메일 주소로 메일이 발송 되었습니다. \n메일을 통해 인증 해주시기 바랍니다.";
		
		pTLLoginVo.setModifiy_id();	// 수정자ID
		
		if(!loginService.insertUser(pTLLoginVo)){
			result = "회원 가입에 실패하였습니다.";
		}
		
		mngUserService.deleteUserCls(loginid);

		list = Arrays.asList(request.getParameter("cls_gbn_list").split(","));
		
		for (String val : list) {
			mngUserClsVo = new MngUserClsVo();
			mngUserClsVo.setloginid(loginid);
			mngUserClsVo.setCls_val(val);
			mngUserClsVo.setModifiy_id();
			mngUserClsVo.setCreate_id();
			mngUserService.insertUserCls(mngUserClsVo);
		}
		
		MngUserAuthVo mngUserAuthVo;
		MngCodeVo mngCodeVo = new MngUserAuthVo();
		mngCodeVo.setUp_cd("AUTH_GP");
		mngCodeVo.setRef_val1("user");//참조값에 default 1개만 설정
		List<MngCodeVo> user_auth = mngCodeService.selectCdMng(mngCodeVo);

		mngUserAuthVo = new MngUserAuthVo();
		mngUserAuthVo.setloginid(loginid);
		mngUserAuthVo.setUser_auth_cd(user_auth.get(0).getCd());
		mngUserAuthVo.setCreate_id();
		mngUserAuthVo.setModifiy_id();
		
		mngUserService.insertUserAuth(mngUserAuthVo);

		//String hOME_URL = "http://recruit.nst.re.kr/";
		
		try{
		
			PTLLoginVo userVo;
			Map<String,Object> paramMap = new HashMap<String,Object>();
			paramMap.put("usrAuth", "ROLE_ORG");
			paramMap.put("org_mng", "Y");
			paramMap.put("gubn_code", Arrays.asList(request.getParameter("cls_gbn_list").split(",")));
			paramMap.put("page", "1");

		}catch(RuntimeException e){
			/**
			 * 인재 등록시 정상 저장 되었으면 기관담당자에게 메일 발송 오류나도 정상 진행!
			 */
			if(logger.isDebugEnabled()){
				logger.debug("인재 등록시 기관담당자 메일 발송시 오류 발생!");
			}
		}

		return result;
	}


	/**
	 * <pre>
	 * 로그인 - 로그인 화면 이동
	 *
	 * </pre>
	 * @author : sejin
	 * @date   : 2016. 2. 19.
	 * @param loginid
	 * @param req
	 * @param model
	 * @return
	 * @throws IOException, SQLException , NullPointerException
	 */
	@RequestMapping(value="/login/user/login.do")
	public String login(String loginid, HttpServletRequest request, Model model)  throws IOException, SQLException , NullPointerException {

		if(StringUtils.isNotBlank(request.getParameter("returnURL"))){
			request.getSession().setAttribute("returnURL", request.getParameter("returnURL"));
		}
		Map<String, ?> flashMap = RequestContextUtils.getInputFlashMap(request);

		String message = "";
		if(flashMap != null){
			message = (String) flashMap.get("message");
		}

		if (!StringUtils.equals("", message)) {
			model.addAttribute("loginid", loginid);
			model.addAttribute("message", message);
			model.addAttribute("result", "false");
		}
		
		return "login/login.tiles";
	}
	
	/**
	 * <pre>
	 * 로그인 실패 
	 *
	 * </pre>
	 * @author : sejin
	 * @date   : 2016. 2. 19.
	 * @param loginid
	 * @param request
	 * @param redirectAttr
	 * @return
	 * @throws IOException, SQLException , NullPointerException
	 */
	@RequestMapping(value="/login/loginErr.do")
	public String loginErr(String loginid, HttpServletRequest request,RedirectAttributes redirectAttr)  throws IOException, SQLException , NullPointerException {
		String message = (String) request.getAttribute("message");
		if (!StringUtils.equals("", message)) {
			redirectAttr.addFlashAttribute("message", message);
		}
		return "redirect:/login/user/login.do";
	}

	/**
	 *
	 * <pre>
	 * 이메일 인증 로직
	 *
	 * </pre>
	 * @author : rastech
	 * @date   : 2015. 10. 16.
	 * @param userId
	 * @param hashKey
	 * @return
	 * @throws IOException, SQLException , NullPointerException
	 */
	@RequestMapping("/login/confirm/{userId}/{hashKey}")
	public String confirm(@PathVariable String userId, @PathVariable String hashKey) throws IOException, SQLException , NullPointerException {
		String view = "login/confirm_fault";
		if (!StringUtils.isEmpty(userId)) {
			String vailKey = CryptoUtil.hashSHA(userId);
			if (StringUtils.equals(vailKey, hashKey)) {
				loginService.updateConfirmEmail(userId);
				view = "login/confirm_ok";
			}
		}
		return view;
	}

}
