/******************************************************************
 * Copyright RASTECH 2015
 ******************************************************************/
package kr.go.cris.commons.interceptors;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import kr.go.cris.commons.constants.Constants;
import kr.go.cris.commons.login.vo.UserVo;
import kr.go.cris.commons.menu.service.MenuService;
import kr.go.cris.ptl.mng.sys.service.SysMntrService;
import kr.go.cris.ptl.mng.sys.vo.SysMntrVo;
import kr.go.cris.ptl.mng.user.service.MngUserService;
import kr.go.cris.ptl.stats.service.StatsService;
import kr.go.cris.ptl.stats.vo.StatsMenuVo;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;


/**
 *
 * <pre>
 * FileName: LoginInterceptor.java
 * Package : kr.go.cris.solar.commons.interceptor
 *
 * Login 인터셉터 클래스 정의
 *
 * </pre>
 * @author : rastech
 * @date   : 2014. 10. 31.
 */
@Component
public class LoginInterceptor extends BaseInterceptor {

	@Autowired
	private MenuService menuService;
	
    @Resource
    SysMntrService sysMntrService;

    @Resource
    MngUserService mngUserService;
	
	@Resource
	private StatsService statsService;
    
	private String meshURL;
	private String errorURL;
	private Set<String> reviewerURL;
	private Set<String> indexerURL;
		
	
    public String getMeshURL() {
		return meshURL;
	}

	public void setMeshURL(String meshURL) {
		this.meshURL = meshURL;
	}

	public String getErrorURL() {
		return errorURL;
	}

	public void setErrorURL(String errorURL) {
		this.errorURL = errorURL;
	}

	public Set<String> getReviewerURL() {
		return reviewerURL;
	}

	public void setReviewerURL(Set<String> reviewerURL) {
		this.reviewerURL = reviewerURL;
	}

	public Set<String> getIndexerURL() {
		return indexerURL;
	}

	public void setIndexerURL(Set<String> indexerURL) {
		this.indexerURL = indexerURL;
	}

	/**
     *
     * <pre>
     * 로그인 확인.
     * 로그인을 하지 않았으면 초기화면("/")으로 이동.
     *
     * </pre>
     * @author : rastech
     * @date   : 2015. 3. 9.
     * @param request
     * @param response
     * @param handler
     * @return
     * @throws IOException, SQLException , NullPointerException
     */
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
    
        if(logger.isDebugEnabled() && Constants.iS_DEV)    {
            logger.debug("################################################################################################");
            logger.debug("RequestURI : [" + request.getMethod() + "] ");
            logger.debug("QueryString : " + request.getQueryString());
            logger.debug("################################################################################################");
        }

		response.setHeader("Cache-Control", "no-cache");
		response.setHeader("Pragma", "no-cache");
		response.setDateHeader("Expires", -1);
		
        //IP 체크
		this.setIpCheck(request);
		
        request.setAttribute("sys_topMenu", menuService.listTopMenu(request));
        // 왼쪽 메뉴 제거
        request.setAttribute("sys_leftMenu", menuService.listLeftMenu(request));
        
        if(request.getParameter("kpmcId") != null){
        	request.getSession().setAttribute("ncmikToken", request.getParameter("kpmcId"));
        }
        //메뉴화면 정보를 등록한다(통계)
        StatsMenuVo statsMenuVo = new StatsMenuVo();
        List<String> list = menuService.urlList(request);
        boolean isUrl = list.contains(request.getRequestURI().replace(request.getContextPath(), ""));
       
        if(isUrl){
        	String menuType = "";
        	String[] urlValues = request.getRequestURI().replace(request.getContextPath(), "").split("/");
        
        	if(urlValues.length >= 4){
        	
	        	if(StringUtils.equals(urlValues[3], "reportDownUpdate.do") || StringUtils.equals(urlValues[3],"rndDownUpdate.do") ){
	        		 menuType = "ARCHIVE_DOWN";
	        	}else{
	        		 menuType = urlValues[1];
	        	}
        	}else{
        		 menuType = urlValues[1];
        	}        
        	
        	statsMenuVo.setUser_ip(request.getRemoteAddr());
        	statsMenuVo.setUser_ip(getClientIpAddr(request));
        	statsMenuVo.setMenu_type(menuType);
        	statsMenuVo.setMenu_uri(request.getRequestURI());
        	
        	statsService.insertStatsMenu(statsMenuVo);
        }
               
        return super.preHandle(request, response, handler);
    }
    
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
    	
    	Writer writer = null;
    	PrintWriter pw = null;
    	try{
    	
	    	if(ex != null){
	    	
				SysMntrVo sysMntrVo = new SysMntrVo();
				writer = new StringWriter();
				pw = new PrintWriter(writer);
				ex.printStackTrace(pw);
			
				sysMntrVo.setErr_yn("Y");
				String err_desc = writer.toString();
			
				if(err_desc.length() > 3900){
					err_desc = err_desc.substring(0, 3500)+"...";
				}
				err_desc = err_desc.replaceAll("(^\\p{Z}+|\\p{Z}+$)", ""); 
				
				sysMntrVo.setErr_desc(err_desc);
				sysMntrVo.setMntr_gbn("SYS_PG");
				sysMntrVo.setMntr_url(request.getRequestURI());
				sysMntrVo.setPtl_cnt(0);
				sysMntrVo.setEml_cnt(0);
				sysMntrVo.setSms_cnt(0);
				sysMntrVo.setModifiy_id();
				sysMntrVo.setCreate_id();
				
				sysMntrService.insertSysMntr(sysMntrVo);
	/*		
				오류 발생시 관리자한테 메일발송 
	 * 				if(!Constants.iS_DEV){
				
					PTLLoginVo PTLLoginVo = mngUserService.selectUserInfo("admin");
					PTLLoginVo.setMail_subject("[출연연 온라인 채용정보시스템]에 오류가 발생하였습니다.");
					StringBuffer sb = new StringBuffer("관리자님 시스템에 오류가 발생하였습니다.<br/>");
					sb.append("[관리자] > [시스템 모니터링] 메뉴에 접근하셔서 오류 내역을 확인하세요.<br/>");
					PTLLoginVo.setMail_content(sb.toString());
					
					mailService.sendCnfmMail(PTLLoginVo);
				}*/
			}
    	
    	}catch(IOException e){
    		logger.debug("ERROR afterCompletion ");
    	}finally{    		
    		try{
    			if(pw != null){
    				pw.close();
    			}
    			if(writer != null){
    				writer.close();
    			}
    		}catch(IOException e1){
    			logger.debug("writer.close() IOException ERROR");
    		}
    		
    		
    	}
    	
    	super.afterCompletion(request, response, handler, ex);
    }
    
    @SuppressWarnings("unused")
	public void setIpCheck(HttpServletRequest request ){
    	
    	String myIP = getClientIpAddr(request); 
    	//if(StringUtils.isBlank(String.valueOf(request.getSession().getAttribute("myIP")))){
    	//	myIP = getClientIpAddr(request); 
    	//}else{
    	//	myIP = String.valueOf(request.getSession().getAttribute("myIP"));
    	//}
    	request.getSession().setAttribute("myIP",myIP); 
    	UserVo vo = (UserVo) request.getSession().getAttribute("userVo");

    	String eLibAgree="";
    	
    	if(vo != null){
    		eLibAgree = vo.getElibagree();
    	}else{
    		eLibAgree = "N";
    	}
    	
		if (   checkIPMatching("152.99.73.*", myIP)     // 질병관리본부 대역
	          	 || checkIPMatching("210.183.128.80", myIP) || checkIPMatching("210.183.128.81", myIP) // 도서관 대역(2017.08.02. 수정)
	          	 // || checkIPMatching("211.199.211.238", myIP) || checkIPMatching("211.199.211.226", myIP) // 도서관 대역
	          		//|| checkIPMatching("192.168.*.*", myIP)      || checkIPMatching("127.0.0.1", myIP)     // 개발 테스트
	          		//checkIPMatching("172.17.*.*", myIP)      || 
	          	)
			{ // IP 대역이면
				request.getSession().setAttribute("NCMIK_ELIB_AGREE","Y"); // 무조건 승인
		    	request.getSession().setAttribute("INNER_IP","Y"); // 내부 사용자 체크
		    	
		    	
		    	
				if (vo == null) {
					request.getSession().setAttribute("NCMIK_ELIB_EMPLYRKEY","NCMIK_GUEST_USER");
					request.getSession().setAttribute("NCMIK_ELIB_EMPLYRNM","Guest");
				} else {
					request.getSession().setAttribute("NCMIK_ELIB_EMPLYRKEY",vo.getEmplyrkey());
					request.getSession().setAttribute("NCMIK_ELIB_EMPLYRNM",vo.getEmplyrnm());
				}
			} else { // IP 대역이 아니면
				request.getSession().setAttribute("INNER_IP","N"); // 내부 사용자 체크
				if (checkIPMatching("125.128.68.*", myIP)  || checkIPMatching("211.236.102.188", myIP)){

					request.getSession().setAttribute("EXCEPTION_YN","Y"); // 국립병원 예외처리
		    	}else{
		    		request.getSession().setAttribute("EXCEPTION_YN","N"); 
		    	}
		    	
		    	if(vo != null) {
			    	if ( vo.getInstttyid().equals("1") || vo.getInstttyid().equals("2")) { // 1:질병관리본부 , 2:보건연구원
				    	eLibAgree = "Y"; // 무조건 승인
				    	request.getSession().setAttribute("INNER_IP","N"); // 내부 사용자 체크
			    	}
			    	request.getSession().setAttribute("INNER_IP","N"); // 내부 사용자 체크
					request.getSession().setAttribute("NCMIK_ELIB_AGREE",eLibAgree);
					request.getSession().setAttribute("NCMIK_ELIB_EMPLYRKEY",vo.getEmplyrkey());
					request.getSession().setAttribute("NCMIK_ELIB_EMPLYRNM",vo.getEmplyrnm());
				} else {
					request.getSession().setAttribute("INNER_IP","N"); // 내부 사용자 체크
					request.getSession().setAttribute("NCMIK_ELIB_AGREE","N");
					request.getSession().setAttribute("NCMIK_ELIB_EMPLYRKEY","");
					request.getSession().setAttribute("NCMIK_ELIB_EMPLYRNM","");
				}
			}
    }
    
    private static String getClientIpAddr(HttpServletRequest request) {  
        String ip = request.getHeader("X-FORWARDED-FOR");  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("Proxy-Client-IP");  
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("WL-Proxy-Client-IP");  
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("HTTP_CLIENT_IP");  
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("HTTP_X_FORWARDED_FOR");  
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getRemoteAddr();  
        }  
        return ip;  
    } 
    
    /**
     * check if IP address match pattern
     * 
     * @param pattern
     *            *.*.*.* , 192.168.1.0-255 , *
     * @param address
     *            - 192.168.1.1<BR>
     *            <code>address = 10.2.88.12  pattern = *.*.*.*   result: true<BR>
     *                address = 10.2.88.12  pattern = *   result: true<BR>
     *                address = 10.2.88.12  pattern = 10.2.88.12-13   result: true<BR>
     *                address = 10.2.88.12  pattern = 10.2.88.13-125   result: false<BR></code>
     * @return true if address match pattern
     */
    @SuppressWarnings("unused")
	private static boolean checkIPMatching(String pattern, String address) {
    
    	if (pattern.equals("*.*.*.*") || pattern.equals("*")) return true;
	
	    String[] mask = pattern.split("\\.");
	    String[] ip_address = address.split("\\.");
	    for (int i = 0; i < mask.length; i++) {
		    if (mask[i].equals("*") || mask[i].equals(ip_address[i]))
		    continue;
		    else if (mask[i].contains("-")) {
			    byte min = Byte.parseByte(mask[i].split("-")[0]);
			    byte max = Byte.parseByte(mask[i].split("-")[1]);
			    byte ip = Byte.parseByte(ip_address[i]);
			    if (ip < min || ip > max) return false;
		    }
		    else {
		    	return false;
		    }
	    }
	    return true;
    }
}
