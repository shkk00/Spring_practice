<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2016-03-21T14:03:39Z</updated>
  <entry>
    <title>Spring Security SAML 1.0.2 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/21/spring-security-saml-1-0-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2016-03-18:2432</id>
    <updated>2016-03-21T14:03:39Z</updated>
    <content type="html">&lt;p&gt;I&amp;rsquo;m pleased to announce the release of Spring Security SAML 1.0.2. Among other things, this release provides a critical update that resolves Deadlock in MetadataManager. Updating is recommended for everyone.&lt;/p&gt;
&lt;div class="callout"&gt;&#xD;
&lt;div class="callout-title"&gt;Upcoming Conferences&lt;/div&gt;&#xD;
&lt;p&gt;Make sure to register for &lt;a href="http://www.springio.net/"&gt;Spring I/O conference&lt;/a&gt; where you can learn about the latest and greatest Spring has to offer.&lt;/p&gt;&#xD;
&lt;p&gt;If you are interested in attending &lt;a href="http://springoneplatform.io/"&gt;SpringOne Platform&lt;/a&gt; make sure you register before the early bird discount ends to save big!&lt;/p&gt;&#xD;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://spring.io/spring-security-saml"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-security-saml/docs/1.0.x/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-security-saml/issues?q=milestone%3A1.0.2"&gt;Changelog&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>A Geospatial Messenger with Kotlin, Spring Boot and PostgreSQL</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/20/a-geospatial-messenger-with-kotlin-spring-boot-and-postgresql" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>SÃ©bastien Deleuze</name>
    </author>
    <id>tag:spring.io,2016-03-20:2433</id>
    <updated>2016-03-20T10:51:00Z</updated>
    <content type="html">&lt;p&gt;Following my first &lt;a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin"&gt;Kotlin blog post&lt;/a&gt;, today I want introduce the new Spring Boot + Kotlin application I have developed for my next week talk &amp;ldquo;Developing Geospatial Web Services with Kotlin and Spring Boot&amp;rdquo; at &lt;a href="http://www.breizhcamp.org/"&gt;Breizhcamp&lt;/a&gt; conference.&lt;/p&gt;&lt;h1&gt;&lt;a href="#dealing-with-native-database-functionalities" class="anchor" name="dealing-with-native-database-functionalities"&gt;&lt;/a&gt;Dealing with native database functionalities&lt;/h1&gt;
&lt;p&gt;One of the goal of this application is to see how to take advantage of native database functionalities like we do in NoSQL world. Here we want to use Geospatial support provided by &lt;a href="http://postgis.net/"&gt;PostGIS&lt;/a&gt;, the spatial database extender for &lt;a href="http://postgresql.org/"&gt;PostgreSQL&lt;/a&gt;. &lt;a href="https://www.compose.io/articles/is-postgresql-your-next-json-database/"&gt;Native JSON support&lt;/a&gt; could also be a good use case.&lt;/p&gt;
&lt;p&gt;This Geospatial Messenger sample application is &lt;a href="https://github.com/sdeleuze/geospatial-messenger"&gt;available on GitHub&lt;/a&gt; in 2 flavors:&lt;br/&gt; - The &lt;code&gt;master&lt;/code&gt; branch uses &lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt;, a Kotlin SQL library with a typesafe API created by JetBrains. It could be compared to &lt;a href="https://github.com/querydsl/querydsl/tree/master/querydsl-sql"&gt;Query DSL SQL&lt;/a&gt; or &lt;a href="http://www.jooq.org/"&gt;jOOQ&lt;/a&gt; but provides an idiomatic Kotlin API and does not require code generation.&lt;br/&gt; - The &lt;a href="https://github.com/sdeleuze/geospatial-messenger/tree/spring-data-jdbc-repository"&gt;&lt;code&gt;spring-data-jdbc-repository&lt;/code&gt;&lt;/a&gt; branch is using &lt;code&gt;spring-data-jdbc-repository&lt;/code&gt;, a community project that allows to use Spring Data &lt;a href="https://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html"&gt;&lt;code&gt;PagingAndSortingRepository&lt;/code&gt;&lt;/a&gt; API with raw SQL queries without JPA. I am using &lt;a href="https://github.com/jirutka/spring-data-jdbc-repository/"&gt;this Jakub Jirutka fork&lt;/a&gt; which is an improved version of &lt;a href="https://github.com/nurkiewicz/spring-data-jdbc-repository"&gt;Tomasz Nurkiewicz original project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://github.com/sebastianperruolo/spring-gis"&gt;Spring Data JPA + Hibernate Spatial variant&lt;/a&gt; would be interesting, so feel free to contribute it with a pull request ;-) Kotlin Query DSL support would be also nice but this is currently not supported (please comment on &lt;a href="https://github.com/querydsl/querydsl/issues/1828"&gt;this issue&lt;/a&gt; if you are interested). In this blog post I will focus on the &lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt; variant.&lt;/p&gt;&lt;h1&gt;&lt;a href="#a-tour-of-geospatial-messenger-code" class="anchor" name="a-tour-of-geospatial-messenger-code"&gt;&lt;/a&gt;A tour of Geospatial Messenger code&lt;/h1&gt;
&lt;p&gt;Our domain model is described easily thanks to these 2 &lt;a href="https://kotlinlang.org/docs/reference/data-classes.html"&gt;Kotlin data classes&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;data class Message(&#xD;
    var content  : String,&#xD;
    var author   : String,&#xD;
    var location : Point? = null,&#xD;
    var id       : Int?   = null&#xD;
)&#xD;
&#xD;
data class User(&#xD;
    var userName  : String,&#xD;
    var firstName : String,&#xD;
    var lastName  : String,&#xD;
    var location  : Point? = null&#xD;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Exposed allows us to describe the structure of our tables with a type-safe SQL API quite handy to use (autocomplete, refactoring and error prone):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;object Messages : Table() {&#xD;
    val id       = integer(&amp;quot;id&amp;quot;).autoIncrement().primaryKey()&#xD;
    val content  = text(&amp;quot;content&amp;quot;)&#xD;
    val author   = reference(&amp;quot;author&amp;quot;, Users.userName)&#xD;
    val location = point(&amp;quot;location&amp;quot;).nullable()&#xD;
}&#xD;
&#xD;
object Users : Table() {&#xD;
    val userName  = text(&amp;quot;user_name&amp;quot;).primaryKey()&#xD;
    val firstName = text(&amp;quot;first_name&amp;quot;)&#xD;
    val lastName  = text(&amp;quot;last_name&amp;quot;)&#xD;
    val location  = point(&amp;quot;location&amp;quot;).nullable()&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is interesting to notice that Exposed does not support natively PostGIS functionalities like geometry types or geospatial requests. That&amp;rsquo;s where &lt;a href="https://kotlinlang.org/docs/reference/extensions.html"&gt;Kotlin extensions&lt;/a&gt; shine, and allow with a few lines of code to add such support without requiring to use extended classes:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;fun Table.point(name: String, srid: Int = 4326): Column&amp;lt;Point&amp;gt;&#xD;
  = registerColumn(name, PointColumnType())&#xD;
&#xD;
infix fun ExpressionWithColumnType&amp;lt;*&amp;gt;.within(box: PGbox2d) : Op&amp;lt;Boolean&amp;gt;&#xD;
  = WithinOp(this, box)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our repository is also quite short and very flexible, since it allows you to write any kind of SQL request even with complex &lt;code&gt;WHERE&lt;/code&gt; clause with a type-safe SQL API. Currently we need to use &lt;code&gt;db.transaction{ }&lt;/code&gt; wrapper, I have created Exposed issue &lt;a href="https://github.com/JetBrains/Exposed/issues/25"&gt;#25&lt;/a&gt; to be able to use regular &lt;a href="http://docs.spring.io/autorepo/docs/spring/4.2.x/spring-framework-reference/html/transaction.html"&gt;Spring transaction management&lt;/a&gt; with &lt;a href="http://docs.spring.io/autorepo/docs/spring/4.2.x/spring-framework-reference/html/transaction.html#transaction-declarative-annotations"&gt;&lt;code&gt;@Transactional&lt;/code&gt;&lt;/a&gt; annotation, feel free to add your +1 ;-)&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;@Repository&#xD;
open class UserRepository @Autowired constructor(val db: Database) {&#xD;
&#xD;
    open fun createTable() = db.transaction {&#xD;
        create(Users)&#xD;
    }&#xD;
&#xD;
    open fun create(user: User) = db.transaction {&#xD;
        Users.insert( toRow(user) )&#xD;
    }&#xD;
&#xD;
    open fun updateLocation(u:String, l: Point) = db.transaction {&#xD;
        location.srid = 4326&#xD;
        Users.update({Users.userName eq u}) { it[Users.location] = l}&#xD;
    }&#xD;
&#xD;
    open fun findAll() = db.transaction {&#xD;
        Users.selectAll().map { fromRow(it) }&#xD;
    }&#xD;
&#xD;
    open fun findByBoundingBox(box: PGbox2d) = db.transaction {&#xD;
        Users.select { Users.location within box }.map { fromRow(it) }&#xD;
    }&#xD;
&#xD;
    open fun deleteAll() = db.transaction {&#xD;
        Users.deleteAll()&#xD;
    }&#xD;
&#xD;
    fun toRow(u: User): Users.(UpdateBuilder&amp;lt;*&amp;gt;) -&amp;gt; Unit = {&#xD;
        it[userName] = u.userName&#xD;
        it[firstName] = u.firstName&#xD;
        it[lastName] = u.lastName&#xD;
        it[location] = u.location&#xD;
    }&#xD;
&#xD;
    fun fromRow(r: ResultRow) =&#xD;
        User(r[Users.userName],&#xD;
             r[Users.firstName],&#xD;
             r[Users.lastName],&#xD;
             r[Users.location])&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Controllers are also very concise and use Spring Framework 4.3 upcoming &lt;code&gt;@GetMapping&lt;/code&gt; / &lt;code&gt;@PostMapping&lt;/code&gt; annotations which are just method-specific shortcuts for &lt;code&gt;@RequestMapping&lt;/code&gt; annotations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;@RestController&#xD;
@RequestMapping(&amp;quot;/user&amp;quot;)&#xD;
class UserController @Autowired constructor(val repo: UserRepository) {&#xD;
&#xD;
    @PostMapping&#xD;
    @ResponseStatus(CREATED)&#xD;
    fun create(@RequestBody u: User) { repo.create(u) }&#xD;
&#xD;
    @GetMapping&#xD;
    fun list() = repo.findAll()&#xD;
&#xD;
    @GetMapping(&amp;quot;/bbox/{xMin},{yMin},{xMax},{yMax}&amp;quot;)&#xD;
    fun findByBoundingBox(@PathVariable xMin:Double,&#xD;
                          @PathVariable yMin:Double,&#xD;
                          @PathVariable xMax:Double,&#xD;
                          @PathVariable yMax:Double)&#xD;
            = repo.findByBoundingBox(&#xD;
                        PGbox2d(Point(xMin, yMin), Point(xMax, yMax)))&#xD;
&#xD;
    @PutMapping(&amp;quot;/{userName}/location/{x},{y}&amp;quot;)&#xD;
    @ResponseStatus(NO_CONTENT)&#xD;
    fun updateLocation(@PathVariable userName:String,&#xD;
                       @PathVariable x: Double,&#xD;
                       @PathVariable y: Double)&#xD;
            = repo.updateLocation(userName, Point(x, y))&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The client side is a pure HTML + Javascript application developed with &lt;a href="http://openlayers.org/"&gt;OpenLayers&lt;/a&gt; mapping library (see &lt;a href="https://github.com/sdeleuze/geospatial-messenger/blob/master/src/main/resources/static/index.html"&gt;index.html&lt;/a&gt; and &lt;a href="https://github.com/sdeleuze/geospatial-messenger/blob/master/src/main/resources/static/map.js"&gt;map.js&lt;/a&gt; for more details) that geolocalizes you and creates geolocalized messages sent/received to/from other users thanks to Server-Sent Events.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/sdeleuze/geospatial-messenger/master/screenshot.png" alt="Screenshot" /&gt;&lt;/p&gt;
&lt;p&gt;And last but not least, the REST API is fully tested and documented thanks to the awesome &lt;a href="http://projects.spring.io/spring-restdocs/"&gt;Spring REST docs&lt;/a&gt; project, see &lt;a href="https://github.com/sdeleuze/geospatial-messenger/blob/master/src/test/kotlin/io/spring/messenger/MessageControllerTests.kt"&gt;MessageControllerTests&lt;/a&gt; and &lt;a href="https://github.com/sdeleuze/geospatial-messenger/blob/master/src/main/resources/static/index.html"&gt;index.adoc&lt;/a&gt; for more details.&lt;/p&gt;&lt;h1&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The main impression I had developing this application is that it was fun, efficient, with a high level of flexibility and safety provided by the SQL API and Kotlin type system and &lt;a href="https://kotlinlang.org/docs/reference/null-safety.html"&gt;null safety&lt;/a&gt;. The resulting Spring Boot application is a 18 MBytes self-contained executable jar with low memory consumption (the app can run with &lt;code&gt;-Xmx32m&lt;/code&gt;!!!). Using Spring REST docs was also a pleasure, demonstrating again Kotlin nice Java interoperability.&lt;/p&gt;
&lt;p&gt;The few pain points I have encountered (&lt;a href="https://youtrack.jetbrains.com/issue/KT-11235"&gt;array annotation attributes&lt;/a&gt;, &lt;a href="https://youtrack.jetbrains.com/issue/KT-5175"&gt;Java 8 Stream support&lt;/a&gt;, &lt;a href="https://youtrack.jetbrains.com/issue/KT-6947"&gt;full callable reference support&lt;/a&gt;), are planned to be fixed in Kotlin 1.1. Exposed library is still young and need to mature, but from my point of view it is promising and shows how Kotlin could be used for building type-safe DSL API (&lt;a href="https://kotlinlang.org/docs/reference/type-safe-builders.html"&gt;this HTML type-safe builder&lt;/a&gt; is also a good example).&lt;/p&gt;
&lt;p&gt;And keep in mind that officially supported &lt;a href="http://projects.spring.io/spring-data/"&gt;Spring Data projects&lt;/a&gt; works well with Kotlin as shown in the &lt;a href="https://github.com/sdeleuze/spring-boot-kotlin-demo"&gt;spring-boot-kotlin-demo&lt;/a&gt; project in my &lt;a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin"&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you happen to be in Barcelona mid May (never a bad time to be in Barcelona anyway!), donât miss the chance to join the &lt;a href="http://www.springio.net/"&gt;Spring I/O conference&lt;/a&gt;. Also, the registration for &lt;a href="http://springoneplatform.io/"&gt;SpringOne Platform&lt;/a&gt; (early August, Las Vegas) has opened recently, in case you want to benefit from early bird ticket pricing. The latter is also still open for talk proposals. So if youâre interested to give a talk about Spring or Pivotal-related technologies, feel free to submit!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>First Release Candidate of Spring Data Hopper Released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/18/first-release-candidate-of-spring-data-hopper-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Oliver Gierke</name>
    </author>
    <id>tag:spring.io,2016-03-18:2431</id>
    <updated>2016-03-18T11:38:00Z</updated>
    <content type="html">&lt;p&gt;In behalf of the Spring Data team I am happy to announce the first and final release candidate for the &lt;a href="https://de.wikipedia.org/wiki/Grace_Hopper"&gt;Hopper&lt;/a&gt; release train. The release ships with a couple of important changes and updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade of the Spring Framework baseline to 4.2 (4.2.5 in particular).&lt;/li&gt;
  &lt;li&gt;Support for Query by Example in Spring Data JPA and MongoDB.&lt;/li&gt;
  &lt;li&gt;Support for object mapping and repositories for Spring Data Redis.&lt;/li&gt;
  &lt;li&gt;Improved support for composed annotations.&lt;/li&gt;
  &lt;li&gt;Support for lookup types and nested associations in Spring Data REST&lt;/li&gt;
  &lt;li&gt;Upgrade to Elasticsearch 2.2, and thus the version number change of Spring Data Elasticsearch to 2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ve managed to resolve &lt;a href="https://jira.spring.io/issues/?filter=15359"&gt;97 tickets&lt;/a&gt; in total for this release and the &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Hopper"&gt;curated change log for the release train&lt;/a&gt; has been updated to include more detailed changes. We&amp;rsquo;re shooting for a GA release in the first week of April, which means that it&amp;rsquo;s the perfect time to give the binaries a spin to make sure you can upgrade smoothly.&lt;/p&gt;
&lt;p&gt;There will be a more detailed blog post coming up early next week to cast some more light on the new features. In the meantime, here&amp;rsquo;s the laundry list of modules included:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.12 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/1.12.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.12.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.12.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.12.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.10 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/1.10.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.10.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.10.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.10.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 1.1 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-keyvalue/1.1.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.1.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.1.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.1.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.4 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/1.4.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.4.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.4.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.4.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 2.0 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-solr/2.0.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.0.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.0.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.0.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.8 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-gemfire/1.8.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.8.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.8.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.8.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 4.1 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/4.1.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.1.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.1.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.1.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.9 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/1.9.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.9.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.9.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.9.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 1.0 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-envers/1.0.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/1.0.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/1.0.0.RC1/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.5 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/2.5.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.5.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.5.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.5.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.7 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/1.7.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.7.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.7.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.7.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 2.0 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/2.0.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/2.0.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/2.0.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/2.0.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 2.1 RC1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/2.1.0.RC1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.1.0.RC1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.1.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.1.0.RC1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you happen to be in Barcelona mid May (never a bad time to be in Barcelona anyway!), don&amp;rsquo;t miss the chance to join the &lt;a href="http://www.springio.net/"&gt;Spring I/O conference&lt;/a&gt; where I&amp;rsquo;ll be presenting on the latest and greatest in Spring Data in general. Also, the registration for &lt;a href="http://springoneplatform.io/"&gt;SpringOne Platform&lt;/a&gt; (early August, Las Vegas) has opened recently, in case you want to benefit from early bird ticket pricing. The latter is also still open for talk proposals. So if you&amp;rsquo;re interested to give a talk about Spring or Pivotal-related technologies, feel free to submit!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Session 1.2.0 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/17/spring-session-1-2-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2016-03-17:2428</id>
    <updated>2016-03-17T12:50:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I&amp;rsquo;m pleased to announce the release of Spring Session 1.2.0.RC1. The release can be found in the &lt;a href="https://github.com/spring-projects/spring-framework/wiki/Spring-repository-FAQ"&gt;Spring Milestone repository&lt;/a&gt; (&lt;a href="https://repo.spring.io/milestone)"&gt;https://repo.spring.io/milestone)&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#change-log" class="anchor" name="change-log"&gt;&lt;/a&gt;Change Log&lt;/h2&gt;
&lt;p&gt;This release includes nearly 30 issues with some exciting new features. You can find a complete list of changes in the &lt;a href="https://github.com/spring-projects/spring-session/issues?utf8=%E2%9C%93&amp;q=milestone%3A1.2.0.RC1"&gt;change log&lt;/a&gt;. The highlights can be found in &lt;a href="http://docs.spring.io/spring-session/docs/1.2.0.RC1/reference/html5/#what-s-new-in-1-2"&gt;What&amp;rsquo;s New in 1.2&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#contributions" class="anchor" name="contributions"&gt;&lt;/a&gt;Contributions&lt;/h2&gt;
&lt;p&gt;I continue to be amazed with the growing Spring Session community. It is because of our community that we were able to do this release within a month of 1.1.0 going GA. A special thank you to all those who contributed Pull Requests for this release:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/371"&gt;#371&lt;/a&gt; - Add MongoOperationsSessionRepository. Thanks &lt;a href="https://github.com/jkubrynski"&gt;Jakub KubryÅski&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/379"&gt;#379&lt;/a&gt; - Add JdbcOperationsSessionRepository. Thanks &lt;a href="https://github.com/vpavic"&gt;Vedran PaviÄ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/397"&gt;#397&lt;/a&gt; - Fix minor documentation errors. Thanks &lt;a href="https://github.com/vpavic"&gt;Vedran PaviÄ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/402"&gt;#402&lt;/a&gt; - @DirtiesContext for GemFire integration tests. Thanks &lt;a href="https://github.com/jxblum"&gt;John Blum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/404"&gt;#404&lt;/a&gt; - Polish GemFire. Thanks &lt;a href="https://github.com/jxblum"&gt;John Blum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/413"&gt;#413&lt;/a&gt; - Add Checkstyle to build. Thanks &lt;a href="https://github.com/vpavic"&gt;Vedran PaviÄ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/414"&gt;#414&lt;/a&gt; - Fix bad reference in IndexDocTests. Thanks &lt;a href="https://github.com/vpavic"&gt;Vedran PaviÄ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/418"&gt;#418&lt;/a&gt; - Add JDBC documentation. Thanks &lt;a href="https://github.com/vpavic"&gt;Vedran PaviÄ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/421"&gt;#421&lt;/a&gt; - Fix JdbcOperationsSessionRepository session cleanup. Thanks &lt;a href="https://github.com/erindru"&gt;Erin Drummond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/425"&gt;#425&lt;/a&gt; - JacksonMongoSessionConverter. Thanks &lt;a href="https://github.com/jkubrynski"&gt;Jakub KubryÅski&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/426"&gt;#426&lt;/a&gt; - SessionRepositoryFilter caches null session lookup. Thanks &lt;a href="https://github.com/oyvindhorneland"&gt;Ãyvind Horneland&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/428"&gt;#428&lt;/a&gt; - Fix incorrect link in What&amp;rsquo;s new section. Thanks &lt;a href="https://github.com/vpavic"&gt;Vedran PaviÄ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/429"&gt;#429&lt;/a&gt; - Update to Sonarqube Plugin. Thanks &lt;a href="https://github.com/eddumelendez"&gt;EddÃº MelÃ©ndez Gonzales&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/430"&gt;#430&lt;/a&gt; - Extend Mongo documentation. Thanks &lt;a href="https://github.com/jkubrynski"&gt;Jakub KubryÅski&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-session/pull/433"&gt;#433&lt;/a&gt; - JdkMongoSessionConverter supports custom ClassLoader. Thanks &lt;a href="https://github.com/jkubrynski"&gt;Jakub KubryÅski&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="callout"&gt;&#xD;
&lt;div class="callout-title"&gt;Upcoming Conferences&lt;/div&gt;&#xD;
&lt;p&gt;Make sure to register for &lt;a href="http://www.springio.net/"&gt;Spring I/O conference&lt;/a&gt; where you can learn about the latest and greatest Spring has to offer.&lt;/p&gt;&#xD;
&lt;p&gt;If you are interested in attending &lt;a href="http://springoneplatform.io/"&gt;SpringOne Platform&lt;/a&gt; make sure you register before the early bird discount ends to save big!&lt;/p&gt;&#xD;
&lt;/div&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-session/"&gt;Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-session/docs/1.2.0.RC1/reference/html5/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-session"&gt;Help&lt;/a&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Session 1.1.1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/17/spring-session-1-1-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2016-03-17:2429</id>
    <updated>2016-03-17T12:45:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I&amp;rsquo;m pleased to announce the release of Spring Session 1.1.1.RELEASE. The release can be found in Maven Central.&lt;/p&gt;&lt;h2&gt;&lt;a href="#change-log" class="anchor" name="change-log"&gt;&lt;/a&gt;Change Log&lt;/h2&gt;
&lt;p&gt;This release includes a number of minor fixes and upgrade is recommended for anyone currently using Spring Session. You can find details of the fixes in the &lt;a href="https://github.com/spring-projects/spring-session/issues?q=milestone%3A1.1.1"&gt;changelog&lt;/a&gt;&lt;/p&gt;
&lt;div class="callout"&gt;&#xD;
&lt;div class="callout-title"&gt;Upcoming Conferences&lt;/div&gt;&#xD;
&lt;p&gt;Make sure to register for &lt;a href="http://www.springio.net/"&gt;Spring I/O conference&lt;/a&gt; where you can learn about the latest and greatest Spring has to offer.&lt;/p&gt;&#xD;
&lt;p&gt;If you are interested in attending &lt;a href="http://springoneplatform.io/"&gt;SpringOne Platform&lt;/a&gt; make sure you register before the early bird discount ends to save big!&lt;/p&gt;&#xD;
&lt;/div&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-session/"&gt;Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-session/docs/1.1.1.RELEASE/reference/html5/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-session"&gt;Help&lt;/a&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - March 15th, 2016</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/15/this-week-in-spring-march-15th-2016" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-03-15:2424</id>
    <updated>2016-03-15T13:34:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring!&lt;/em&gt; What a crazy week it&amp;rsquo;s been since we last talked! I spent a day in San Francisco, Germany, Scotland, and Romania between Monday and Friday last. It&amp;rsquo;s nice this week to be in (warm!) southern California in Los Angeles and San Diego speaking to customers and at a couple of meetups! If you&amp;rsquo;re around, I hope you&amp;rsquo;ll join me for &lt;a href="http://www.meetup.com/Los-Angeles-Java-User-Group/events/228563209/"&gt;the Cloud Native Meetup here in Los Angeles&lt;/a&gt; (tonight!).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;a href="https://nofluffjuststuff.com/home/main"&gt;2016 NFJS tour has just kicked off&lt;/a&gt;, first in Minneapolis. The amazing &lt;a href="http://twitter.com/habuma"&gt;Craig Walls&lt;/a&gt; and &lt;a href="http://twitter.com/mstine"&gt;Matt Stine&lt;/a&gt; be presenting at most of the NFJS shows in 2016 on all manner of topics including Spring Boot, Spring Cloud, Spring Security, Spring Data, Spring Cloud Data Flow, and (later this year) Springâs new reactive stuff. Make sure to check out the event in your city!&lt;/li&gt;
  &lt;li&gt;JUnit 5 is coming! &lt;a href="https://dzone.com/articles/junit-5-basics?edition=153261&amp;utm_source=Spotlight&amp;utm_medium=email&amp;utm_content=queue&amp;utm_campaign=java%202016-03-15"&gt;Check out Lukas Eder&amp;rsquo;s quick runthrough of some of the new features in JUnit 5&lt;/a&gt;. JUnit 5 is critical infrastructure code, and it&amp;rsquo;s for this reason that we at Pivotal were happy to help sponsor some of its development.&lt;/li&gt;
  &lt;li&gt;Get the &lt;a href="https://dzone.com/articles/java-as-new-local-variable-type-inference"&gt;details on the new JEP for type inference in Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Integration lead &lt;a href="https://spring.io/blog/2016/03/14/spring-for-apache-kafka-milestone-1-available"&gt;Gary Russell has just announced Spring for Apache Kafka M1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Every now and then people say Spring Boot has &lt;em&gt;too much magic&lt;/em&gt;. (Invariably, others &lt;a href="https://twitter.com/phillip_webb/status/705909774001377280"&gt;will complain it has too much boilerplate&lt;/a&gt;!) I think the key to demystifying Spring Boot&amp;rsquo;s capabilities is to understand its secret sauce, auto-confiuration, which is &lt;em&gt;very&lt;/em&gt; capably explained &lt;a href="http://www.sivalabs.in/2016/03/how-springboot-autoconfiguration-magic.html"&gt;in this epic blog&lt;/a&gt; by our pal K. Siva Prasad Reddy. Also, undestand that you can start the application with &lt;code&gt;--debug=true&lt;/code&gt; and you&amp;rsquo;ll see an enumeration of which auto-configuration conditionals are in play.&lt;/li&gt;
  &lt;li&gt;project Reactor lead Stephane Maldini talks &lt;a href="https://spring.io/blog/2016/03/11/reactor-core-2-5-becomes-a-unified-reactive-foundation-on-java-8"&gt;about how Reactor fits in with the larger reactive theme of Spring 5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;make sure to join &lt;a href="https://spring.io/blog/2016/03/09/webinar-spring-boot-and-ratpack-web-framework"&gt;Ratpack contributor Danny Hyun for an upcoming webinar introducing Ratpack and Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Make sure to join Spring Cloud Stream lead Marius Bogoevici &lt;a href="https://spring.io/blog/2016/03/09/webinar-stream-processing-in-the-cloud-with-data-microservices"&gt;for a webinar on stream processing in the cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the incomparable &lt;a href="http://hillert.blogspot.com/2016/03/spring-boot-with-jsp-in-executable-jar.html"&gt;Gunnar Hillert wrote a blog on how to use &lt;code&gt;.jsp&lt;/code&gt; pages with embedded Spring Boot applications&lt;/a&gt;. He does this &lt;em&gt;mainly&lt;/em&gt; to support migrating an existing application; &lt;em&gt;not&lt;/em&gt; recommended for new applications!&lt;/li&gt;
  &lt;li&gt;want to write &lt;a href="https://developer.atlassian.com/blog/2016/03/connecting-connect-with-spring-boot/"&gt;an Atlassian Connect application using Spring Boot&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;Apress has &lt;a href="http://www.apress.com/9781484214329"&gt;just published &lt;em&gt;Pro Spring Boot&lt;/em&gt;&lt;/a&gt; - check it out!&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t miss Sebastian Deleuze&amp;rsquo;s SpringOne2GX 2015 replay on &lt;a href="http://spring.io/blog/2016/03/15/springone2gx-2015-replay-isomorphic-templating-with-spring-boot-nashorn-and-react"&gt;Isomorphic templating with Spring Boot, Nashorn and React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Monish Unni, formerly of ETrade, talking about distributed call tracing in his SpringOne2GX 2015 talk &lt;a href="http://spring.io/blog/2016/03/15/springone2gx-2015-replay-introducing-calltracing-tm-based-on-rabbitmq-spring-and-zipkin"&gt;Introducing CallTracing(tm), based on RabbitMQ, Spring and Zipkin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Joseph Paulchell from CapitalOne plays with Analytics, CEP and Spring XD in his &lt;a href="http://spring.io/blog/2016/03/15/supercharging-operations-and-analytics-using-spring-xd-to-support-analytics-and-cep"&gt;SpringOne2GX 2015 replay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay:  Isomorphic templating with Spring Boot, Nashorn and React</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/15/springone2gx-2015-replay-isomorphic-templating-with-spring-boot-nashorn-and-react" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-03-16:2425</id>
    <updated>2016-03-15T13:33:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Speaker: Sebastian Deleuze&lt;br/&gt;Web / JavaScript Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/isomorphic-templating-with-spring-boot-nashorn-and-react"&gt;http://www.slideshare.net/SpringCentral/isomorphic-templating-with-spring-boot-nashorn-and-react&lt;/a&gt;&lt;br/&gt;The first part of this talk introduces the upcoming Spring Framework 4.2 Script Templating support,&lt;br/&gt;showing how you can use Nashorn, Jython or JRuby to render templates with Javascript, Python or Ruyby based template engines. We will see how easy you can extend out of the box capabilities on the scripting side.&lt;br/&gt;Based on benchmarks, features available and code samples, we will see if this can be a production ready alternative to templating technologies usually used with Spring MVC like JSP, Velocity, FreeMarker or Thymeleaf.&lt;br/&gt;The second part of the talk will explain how to build an isomorphic application that performs the same templates rendering on client AND server based on Spring Boot, Nashorn and React, the the latest game changer Javascript library released by Facebook. The rendering of Javascript templates is performed initially on server-side thanks to a Spring MVC + Nashorn integration, then enriched on client side with a Server-Sent Events push mechanism.&lt;br/&gt;This kind of isomorphic templating + the disruptive innovation brought by React with his virtual DOM mechanism make it possible to build a new kind of applications : responsive, with a great UX while being accessible.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/cPxq66nXsf4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Introducing CallTracing(tm), based on RabbitMQ, Spring and Zipkin</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/15/springone2gx-2015-replay-introducing-calltracing-tm-based-on-rabbitmq-spring-and-zipkin" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-03-16:2426</id>
    <updated>2016-03-15T13:32:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Speaker: Monish Unni&lt;br/&gt;Data / Integration Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/introducing-calltracing-tm-based-on-rabbitmq-spring-and-zipkin"&gt;http://www.slideshare.net/SpringCentral/introducing-calltracing-tm-based-on-rabbitmq-spring-and-zipkin&lt;/a&gt;&lt;br/&gt;Do you live in a world where StackTraces arenât quite enough? There is no easy way for you to predict how a certain set of services might be called or what their usage patterns are? Does everything work in DIT/SIT/UAT/PELT until you hit production and strange things start to happen due to distribution of services? Solution: Use RabbitMQ (AMQP protocol) and spring proxies/interceptors to enable an out-of-band instrumentation to trace requests and gain deep knowledge about how certain requests perform in a distributed system. In 2014, as part of infrastructure wide changes, I introduced calltracing(tm) as a way to correlate requests from a single user across E*Trade&amp;rsquo;s heterogeneous systems. This &amp;quot;&amp;ldquo;trace&amp;rdquo;&amp;quot; is then consumed by various big-data analytic tools to produce aggregated reports. Zipkin(tm) is a collector, digester and a visualization front-end for the aggregated data. in other words, itâs a distributed tracing system that can show timing data for services that are on various nodes. Zipkin manages both collection and lookup of data through a collector and a query service. In this session, i will discuss specifically how E*Tradeâs disparate services are stitched together using RabbitMQ(AMQP protocol) and Spring Proxies to form the enablement tier to provide data to Zipkin.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Awm7KsU7nxw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Supercharging Operations and Analytics: Using Spring XD to Support Analytics and CEP</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/15/supercharging-operations-and-analytics-using-spring-xd-to-support-analytics-and-cep" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-03-16:2427</id>
    <updated>2016-03-15T13:31:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Speaker: Joseph Paulchell, CapitalOne&lt;br/&gt;Big Data Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/supercharging-operations-analysis-using-spring-xd-to-support-analytics-and-cep"&gt;http://www.slideshare.net/SpringCentral/supercharging-operations-analysis-using-spring-xd-to-support-analytics-and-cep&lt;/a&gt;&lt;br/&gt;Operations, analytics, and business teams are requesting ever increasing amounts of data delivered to Big Data analysis platforms and tools. This demand is driven by the desire to better understand user experience, quality of service, real time performance of systems, and the undiscovered patterns and opportunities that exist to improve service, sell products, and delight users. Capital One Technology solved for the ever increasing demand for data from consumer facing applications using Spring Extreme Data (XD) and custom Java libraries to stream data in real time from applications to Hadoop HDFS, Mongo, Kafka, Splunk, and others. In this talk we will discuss our journey from batch-oriented processes using databases to a real time data streaming solution and the significant benefits achieved. Weâll cover the implications of adopting a streaming solution, why we selected Spring XD, and the target architecture we are implementing to land data in HDFS. Weâll cover how we automated environment provisioning, the design for our client libraries (Java, Spring), our XD environment, and how weâre tapping into all that data. Weâll describe challenges we overcame on this journey including connecting to our HDFS cluster, working with multiple Mongo stores, using Kerberos, and ensuring protection and encryption of sensitive data end to end. Lastly weâll talk about a number of use cases where we are evaluating Spring XD and see potential benefits including ârolling windowâ system analytics, digital message delivery, and event driven architectures.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/hQ7wnHgx0eY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring for Apache Kafka Milestone 1 Available</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/14/spring-for-apache-kafka-milestone-1-available" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2016-03-08:2418</id>
    <updated>2016-03-14T13:11:00Z</updated>
    <content type="html">&lt;p&gt;I am pleased to announce that the &lt;code&gt;spring-kafka&lt;/code&gt; (Spring for Apache Kafka) first milestone is now available (&lt;code&gt;1.0.0.M1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The existing &lt;code&gt;spring-integration-kafka&lt;/code&gt; &lt;a href="https://github.com/spring-projects/spring-integration-kafka"&gt;extension project&lt;/a&gt; - currently at version &lt;code&gt;1.3.0.RELEASE&lt;/code&gt; supports Kafka &lt;a href="http://kafka.apache.org/082/documentation.html"&gt;0.8.x.x&lt;/a&gt; and is used in &lt;a href="http://projects.spring.io/spring-xd/"&gt;Spring XD&lt;/a&gt; (Kafka &lt;code&gt;MessageBus&lt;/code&gt;) and &lt;a href="http://cloud.spring.io/spring-cloud-stream/"&gt;Spring Cloud Stream&lt;/a&gt; (Kafka &lt;code&gt;Binder&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This new project (&lt;code&gt;spring-kafka&lt;/code&gt;) breaks out the core components into a separate project. It is based on the new &lt;a href="http://kafka.apache.org/documentation.html"&gt;0.9.0.x&lt;/a&gt; pure Java Kafka clients.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spring-kafka&lt;/code&gt; brings the familiar Spring programming model to Apache Kafka for any Spring user, not just those using Spring Integration. An upcoming &lt;code&gt;spring-integration-kafka&lt;/code&gt; release will be a complete rewrite, utilizing the &lt;code&gt;spring-kafka&lt;/code&gt; project internally.&lt;/p&gt;
&lt;p&gt;Much like the other messaging projects in the Spring portfolio, &lt;code&gt;spring-kafka&lt;/code&gt; provides:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Message Listener Container.&lt;/li&gt;
  &lt;li&gt;Annotations for POJO message listeners (&lt;code&gt;@KafkaListener&lt;/code&gt; - similar to &lt;code&gt;@JmsListener&lt;/code&gt; and &lt;code&gt;@RabbitListener&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;KafkaTemplate&lt;/code&gt; for sync and async sending to Kafka topics:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
@EnableKafka&#xD;
public class KafkaConfig {&#xD;
     // Infrastructure @Beans omitted. &#xD;
     // See Reference Manual and tests for comprehensive sample&#xD;
&#xD;
     @Bean&#xD;
     public Listener listener() {&#xD;
        return new Listener();&#xD;
     }&#xD;
&#xD;
}&#xD;
&#xD;
public class Listener {&#xD;
&#xD;
     @KafkaListener(topics = &amp;quot;myTopic&amp;quot;)&#xD;
     public void handleFromKakfa(String payload) {&#xD;
       ...&#xD;
    }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using maven or gradle: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.kafka&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-kafka&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;version&amp;gt;1.0.0.M1&amp;lt;/version&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;dependencies {&#xD;
    compile &amp;#39;org.springframework.kafka:spring-kafka:1.0.0.M1&amp;#39;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, the &lt;code&gt;spring-kafka-test&lt;/code&gt; artifact is available, containing support for testing, including an embedded Kafka broker, hamcrest &lt;code&gt;Matcher&lt;/code&gt;s etc.&lt;/p&gt;
&lt;p&gt;Both artifacts are available in the &lt;code&gt;repo.spring.io/milestone&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="http://docs.spring.io/spring-kafka/docs/1.0.0.M1/reference/htmlsingle/"&gt;milestone 1 reference manual&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Many thanks to &lt;a href="https://github.com/sobychacko"&gt;Soby Chacko&lt;/a&gt; (for kicking off the initial Spring Integration Kafka extension), &lt;a href="https://spring.io/team/mbogoevici"&gt;Marius Bogoevici&lt;/a&gt; and &lt;a href="https://spring.io/team/artembilan"&gt;Artem Bilan&lt;/a&gt; for their help with this important project.&lt;/p&gt;&lt;h1&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;First milestone of &lt;code&gt;spring-integration-kafka&lt;/code&gt; (&lt;code&gt;2.0&lt;/code&gt;) based on &lt;code&gt;spring-kafka&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;A Spring Boot starter, with auto configuration support etc.&lt;/li&gt;
  &lt;li&gt;A new &lt;code&gt;Binder&lt;/code&gt; implementation for &lt;code&gt;spring-cloud-stream&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Flesh out the documentation, set up a project page etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the meantime, you can follow progress, report issues, etc, in the &lt;a href="https://github.com/spring-projects/spring-kafka"&gt;github repo&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Reactor Core 2.5 becomes a unified Reactive Foundation on Java 8</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/11/reactor-core-2-5-becomes-a-unified-reactive-foundation-on-java-8" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stephane Maldini</name>
    </author>
    <id>tag:spring.io,2016-02-21:2393</id>
    <updated>2016-03-11T09:38:00Z</updated>
    <content type="html">&lt;p&gt;Following our &lt;a href="https://spring.io/blog/2016/02/16/reactor-2-5-a-second-generation-reactive-foundation-for-the-jvm"&gt;Reactor 2.5 introduction&lt;/a&gt; a few weeks ago, we are delighted to announce our next major milestone: &lt;a href="http://github.com/reactor/reactor-core"&gt;Reactor Core 2.5.0.M2&lt;/a&gt;. This is again the result of a collective effort laser focused on API design and efficiency. &lt;/p&gt;&lt;h1&gt;&lt;a href="#a-meaningful-composition-api" class="anchor" name="a-meaningful-composition-api"&gt;&lt;/a&gt;A meaningful composition API&lt;/h1&gt;
&lt;p&gt;The former &lt;strong&gt;reactor-stream&lt;/strong&gt; module has been merged into Reactor Core 2.5.0.M2. &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/Flux.html"&gt;Flux&lt;/a&gt; and &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/Mono.html"&gt;Mono&lt;/a&gt; respectively representing &lt;strong&gt;0..N&lt;/strong&gt; and &lt;strong&gt;0..1&lt;/strong&gt; sequence types now cover a solid range of operations for the following categories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cold-to-Hot or Multicasting : &lt;code&gt;publish&lt;/code&gt;, &lt;code&gt;publishNext&lt;/code&gt;, &lt;code&gt;cache&lt;/code&gt;, &lt;code&gt;multicast&lt;/code&gt;&amp;hellip;&lt;/li&gt;
  &lt;li&gt;Aggregating/Reducing (Transforming) : &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;sample&lt;/code&gt;&amp;hellip;&lt;/li&gt;
  &lt;li&gt;Filtering : &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt;, &lt;code&gt;single&lt;/code&gt;&amp;hellip;&lt;/li&gt;
  &lt;li&gt;Conditioning : &lt;code&gt;timeout&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, &lt;code&gt;takeUntil&lt;/code&gt;, &lt;code&gt;skip&lt;/code&gt;, &lt;code&gt;skipUntil&lt;/code&gt;&amp;hellip;&lt;/li&gt;
  &lt;li&gt;Combining : &lt;code&gt;withLatestFrom&lt;/code&gt;, &lt;code&gt;combineLatest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Backpressuring : &lt;code&gt;onBackpressureDrop&lt;/code&gt;, &lt;code&gt;onBackpressureLatest&lt;/code&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the capabilities existed, we are now using the hyper efficient &lt;a href="http://github.com/reactor/reactive-streams-commons"&gt;Reactive Streams Commons&lt;/a&gt; operator implementations.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/reactor/projectreactor.io/c67e756cc8e17cc52b6845d216645a4f81571fc0/src/main/static/assets/img/org3.png" /&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="#designed-for-java-8-and-beyond" class="anchor" name="designed-for-java-8-and-beyond"&gt;&lt;/a&gt;Designed for Java 8 and beyond&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://projectreactor.io"&gt;All Reactor 2.5 projects&lt;/a&gt; have been upgraded to Java 8&lt;/strong&gt;. While the JVM market is getting standardized on Java 8, we see no reason to delay further our transition. Let&amp;rsquo;s enumerate the benefits :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All &amp;ldquo;backported&amp;rdquo; functional callbacks in &lt;code&gt;reactor.fn&lt;/code&gt; have been replaced by &lt;code&gt;java.util.function&lt;/code&gt;. As a result Reactor offers a standard interactive contract and a competitive surface API.&lt;/li&gt;
  &lt;li&gt;Convert &lt;code&gt;Flux&lt;/code&gt; to/from &lt;code&gt;java.util.stream.Stream&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Convert &lt;code&gt;Mono&lt;/code&gt; to/from &lt;code&gt;CompletableFuture&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Safely create &lt;code&gt;Mono&lt;/code&gt; from &lt;code&gt;Optional&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sane time period support with &lt;code&gt;Duration&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Dropped shadowed JSR 166 backport for ConcurrentHashMap use specially affecting &lt;a href="http://github.com/reactor/reactor-addons"&gt;Reactor Addons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A massive step closer to the programming experience scheduled into Spring Framework 5, itself building on Java 8.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some Java 8 extractors and generators in action:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;java.util.stream.Stream&amp;lt;String&amp;gt; stream = &#xD;
    Mono.fromCompletableFuture(someCompletableFuture)&#xD;
        .timeout(Duration.ofSeconds(30))&#xD;
        .log(&amp;quot;hello&amp;quot;)&#xD;
        .flatMap( pojo -&amp;gt; Flux.just(pojo.getId(), pojo.getName())&#xD;
        .stream();&#xD;
&#xD;
Flux.fromStream(stream)&#xD;
    .delay(1000)&#xD;
    .consume(System.out::println);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could envision a backport for Android compatibility later, still our focus for now is on Java applications.&lt;/p&gt;&lt;h1&gt;&lt;a href="#highlights" class="anchor" name="highlights"&gt;&lt;/a&gt;Highlights&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Updated &lt;a href="http://projectreactor.io/core/docs/api/"&gt;Javadoc&lt;/a&gt; with more Marble Diagram illustrations.&lt;/li&gt;
  &lt;li&gt;100% &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt; operational design based on the collaboration effort &lt;a href="http://github.com/reactor/reactive-streams-commons"&gt;Reactive Streams Commons&lt;/a&gt;&lt;br/&gt;&amp;ndash; &lt;a href="http://akarnokd.blogspot.co.uk/2016/03/rxjava-design-retrospect.html"&gt;Build on years of experience&lt;/a&gt; from &lt;code&gt;Reactive4Java&lt;/code&gt;, &lt;code&gt;RxJava&lt;/code&gt; and &lt;code&gt;Reactor&lt;/code&gt;&lt;br/&gt;&amp;ndash; Efficient, really efficient, supports even further efficiency with operation fusion&lt;br/&gt;&amp;ndash; More Performance benchmarks from &lt;a href="https://github.com/reactor/reactive-streams-commons/tree/master/src/jmh/java/reactivestreams/commons"&gt;Reactive Streams Commons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Available concurrency and prefetch arguments for operators with queue&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Mono&lt;/code&gt; publish-subscribe : &lt;code&gt;MonoProcessor&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;More tests : combining current Reactive Streams Commons &lt;strong&gt;(879)&lt;/strong&gt; and Core &lt;strong&gt;(1153&lt;/strong&gt;) plus our internal early adopters such as Spring Framework 5 and Cloud Foundry Java Client.&lt;/li&gt;
  &lt;li&gt;Introspectable : Monitor and Export any Reactor flow as JSON with &lt;code&gt;Flux#debug&lt;/code&gt; and &lt;code&gt;Mono#debug&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Refer to the &lt;a href="http://github.com/reactor/reactor-core"&gt;issues tracker&lt;/a&gt; for any issue including known issues &lt;a href="https://github.com/reactor/reactor-core/issues?q=is%3Aissue+is%3Aclosed+milestone%3A2.5.0.RC1"&gt;already fixed in snapshot artefacts post M2&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-rsquo-s-on-next" class="anchor" name="what-rsquo-s-on-next"&gt;&lt;/a&gt;What&amp;rsquo;s (on)Next ?&lt;/h1&gt;
&lt;p&gt;With this release we have a foundation we think will be useful for library and application developers alike. We are ready to collect more feedbacks while our next stop will be on &lt;a href="http://github.com/reactor/reactor-io"&gt;Reactor IO&lt;/a&gt; : Reactor Aeron and Reactor Netty. There are great plans stirring for months now for these two Reactor IO modules to help you cross network boundaries with backpressure factored-in ! The two inspiring traits are the same as in Reactor Core : Focus on API and Efficiency, no extra ceremony or academic background required.&lt;/p&gt;
&lt;p&gt;In parallel we are doubling our effort on creating various &lt;em&gt;starting experiences&lt;/em&gt;, expect some blogging, guides and close collaboration with the Spring Boot team to get this awesomeness right at your fingertip with little fuss.&lt;/p&gt;
&lt;p&gt;Also, expect reactive coverage at this yearâs &lt;a href="http://springio.net"&gt;Spring I/O Barcelona&lt;/a&gt;. We have the pleasure to kick-off Day-2 schedule with &lt;a href="https://twitter.com/rstoya05"&gt;Rossen Stoyanchev&lt;/a&gt; and we will be discussing application design, the reactive way of course.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Spring Boot and Ratpack Web Framework</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/09/webinar-spring-boot-and-ratpack-web-framework" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-03-09:2423</id>
    <updated>2016-03-09T09:03:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Danny Hyun&lt;br/&gt;With the advent of Ratpack and Spring Boot, people think you need to choose between one or the other. That couldn&amp;rsquo;t be further from the truth. The only place where they overlap is in serving web requests. Spring Framework is a very rich ecosystem including but not limited to DI, web mvc, data, security, etc.&lt;br/&gt;Ratpack focuses on rapid web app prototyping and iteration balancing low resource utilization, high performance and developer friendliness. We&amp;rsquo;ll explore the ways in which Ratpack and Spring Boot work in harmony.&lt;/p&gt;
&lt;p&gt;Thursday, March 31st, 2016 3:00PM London GMT &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMSpringBootandRatpackWebFramework_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Thursday, March 31st, 2016 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMSpringBootandRatpackWebFramework_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Stream Processing in the Cloud with Data Microservices</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/09/webinar-stream-processing-in-the-cloud-with-data-microservices" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-03-09:2422</id>
    <updated>2016-03-09T08:57:00Z</updated>
    <content type="html">&lt;p&gt;Stream Processing in the Cloud with Data Microservices&lt;br/&gt;Speakers: Marius Bogoevici, Pivotal&lt;/p&gt;
&lt;p&gt;The future of scalable data processing is event-driven microservices! They provide a powerful paradigm that solves issues typically associated with distributed applications such as availability, data consistency, or communication complexity, and allows the creation of sophisticated and extensible data processing pipelines.&lt;/p&gt;
&lt;p&gt;Building on the ease of development and deployment provided by Spring Boot and the cloud native capabilities of Spring Cloud, the Spring Cloud Stream project provides a simple and powerful framework for creating event-driven microservices. They make it easy to develop data-processing Spring Boot applications that build upon the capabilities of Spring Integration. At a higher level of abstraction, Spring Cloud Data Flow is an integrated orchestration layer that provides a highly productive experience for deploying and managing sophisticated data pipelines consisting of standalone microservices. Streams are defined using a DSL abstraction and can be managed via shell and a web UI. Furthermore, a pluggable runtime SPI allows Spring Cloud Data Flow to coordinate these applications across a variety of distributed runtime platforms such as Apache YARN, Cloud Foundry, Kubernetes, or Apache Mesos.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll see live deployment demos on different platforms ranging from local cluster to a remote Cloud to show the simplicity of the developer experience.&lt;/p&gt;
&lt;p&gt;Tuesday, March 22nd, 2016 3:00PM London GMT &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMStreamProcessingintheCloudwDataMicroservices_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, March 22nd, 2016 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMStreamProcessingintheCloudwDataMicroservices_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - March 8th, 2016</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/08/this-week-in-spring-march-8th-2016" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-03-08:2417</id>
    <updated>2016-03-08T10:37:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in Bruhl, Germany for the amazing &lt;a href="http://javaland.eu"&gt;JavaLand&lt;/a&gt; show, then it&amp;rsquo;s off to Scotland to visit a large customer, and then it&amp;rsquo;s off to Romania for &lt;a href="https://voxxeddays.com/bucharest/"&gt;Voxxed Days Bucharest&lt;/a&gt;. If you&amp;rsquo;re in any of those places, &lt;a href="http://twitter.com/starbuxman"&gt;I&amp;rsquo;d love to connect&lt;/a&gt;!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring ninja Stephane Nicoll introduces &lt;a href="https://spring.io/blog/2016/03/04/core-container-refinements-in-spring-framework-4-3"&gt;some of the niceties in Spring framework 4.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Do not miss Micah Silverman&amp;rsquo;s upcoming webinar introducing &lt;a href="https://spring.io/blog/2016/03/03/webinar-spring-security-authentication-with-spring-boot-and-more"&gt;the amazing Stormpath and Spring/Spring Boot-based integration and Auto-configuration&lt;/a&gt;. Stormpath is an epic identity provider as-a-service. It&amp;rsquo;s ideal for cloud-based applications.&lt;/li&gt;
  &lt;li&gt;Spring IO Platform lead &lt;a href="https://spring.io/blog/2016/03/02/spring-io-platform-2-0-3-release"&gt;Andy Wilkinson just announced Spring IO Platform 2.0.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;From SpringOne2GX 2015, Integration lead Gary Russell shows us &lt;a href="http://spring.io/blog/2016/03/08/springone2gx-2015-replay-applied-spring-integration-spring-amqp-and-rabbitmq-in-spring-xd"&gt;how RabbitMQ powers Spring XD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Thomas Risberg, also from SpringOne2GX 2015, shows us how simpler Hadoop workflows, and distribution portability make raw Hadoop much simpler for Spring developers. &lt;a href="http://spring.io/admin/blog/2420-springone2gx-2015-replay-hadoop-workflows-distributed-yarn-apps-and-spring"&gt;Check out the replay!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Petar Tahchiev applies Springdom to the problem domain of e-commerce in this SpringOne2GX 2015 replay, &lt;a href="http://spring.io/blog/2016/03/08/springone2gx-2015-replay-building-a-next-generation-cloud-e-commerce-platform-with-spring"&gt;Building a next-generation cloud e-commerce platform with Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JavaCodeGeeks has posted Srujana Cherukuri&amp;rsquo;s &lt;a href="https://examples.javacodegeeks.com/enterprise-java/spring/boot/spring-boot-tutorial-beginners/"&gt;fantastic introduction to using Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Want to &lt;a href="https://blog.openshift.com/using-spring-boot-on-openshift/"&gt;use Spring Boot on Openshift&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;I dig this post explaining &lt;a href="http://graphaware.com/neo4j/2016/02/24/upgrading-spring-data-neo4j-4-1.html"&gt;how to upgrade from Neo4J 4.0 to 4.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/master/redis/cluster"&gt;now supports Redis Cluster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;there&amp;rsquo;s a lot of good stuff &lt;a href="http://www.infoq.com/news/2016/03/junit5-alpha"&gt;in the upcoming JUnit 5&lt;/a&gt;: get the bits, kick the tires and go!&lt;/li&gt;
  &lt;li&gt;If you&amp;rsquo;re using Apache Wicket, &lt;a href="http://www.infoq.com/news/2016/03/apache-wicket-7.2"&gt;there&amp;rsquo;s a discussion on it over at InfoQ&lt;/a&gt; &lt;em&gt;and&lt;/em&gt;, as we learn in that article, there&amp;rsquo;s apparently a Spring Boot Auto-configuration, too! The Auto-configuration seems a bit odd, in that it replaces some of the normal things you see in a Spring Boot application but it looks easy enough to get working.&lt;/li&gt;
  &lt;li&gt;we&amp;rsquo;re planning our big &lt;a href="http://springoneplatform.io/"&gt;SpringOne Platform&lt;/a&gt; conference and it&amp;rsquo;s going to be amazing! We hope you&amp;rsquo;ll join us! &lt;a href="http://springoneplatform.io/submit"&gt;If you&amp;rsquo;ve got a story to tell, then please, by all means, submit your talk!&lt;/a&gt; by 3/24!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Applied Spring Integration, Spring AMQP and RabbitMQ in Spring XD</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/08/springone2gx-2015-replay-applied-spring-integration-spring-amqp-and-rabbitmq-in-spring-xd" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-03-09:2419</id>
    <updated>2016-03-08T10:36:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenter: Gary Russell&lt;br/&gt;Data / Integration Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/applied-spring-integration-spring-amqp-rabbitmq-in-spring-xd"&gt;http://www.slideshare.net/SpringCentral/applied-spring-integration-spring-amqp-rabbitmq-in-spring-xd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this session we will discuss how Spring Integration and Spring AMQP are used as two of the underlying technologies in Spring XD.&lt;/p&gt;
&lt;p&gt;The RabbitMQ message bus is used to dynamically create and bind queues and exchanges at runtime when modules are deployed.&lt;br/&gt;Items of particular interest include the provision of taps using fanout exchanges, use of the RabbitMQ REST API and spring-retry within the message bus. Spring Integration is used to bind the modules to the message bus (as well as being the technology used within the modules themselves.&lt;/p&gt;
&lt;p&gt;This use case shows how these technologies can be used in a much more dynamic scenario than the typical enterprise integration application.&lt;/p&gt;
&lt;p&gt;Attendees will learn the architecture and how to apply similar techniques to their own applications. As an added bonus, we will see some of the performance enhancements that XD has driven into the Spring Integration project - in particular how the JMX support is now much more streamlined and performant.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/JLI94Os175k" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Hadoop Workflows, Distributed YARN Apps and Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/08/springone2gx-2015-replay-hadoop-workflows-distributed-yarn-apps-and-spring" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-03-09:2420</id>
    <updated>2016-03-08T10:36:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenter: Thomas Risberg&lt;br/&gt;Big Data Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/hadoop-workflows-using-spring-technologies"&gt;http://www.slideshare.net/SpringCentral/hadoop-workflows-using-spring-technologies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Hadoop ecosystem is getting bigger and more complex. Using multiple projects from this ecosystem, you will have to deal with the difference in philosophy and usage patterns that these project promote. The &amp;ldquo;Spring for Apache Hadoop&amp;rdquo; project uses many Spring projects like Data, Integration, Batch and Boot to resolve many of these issues. It simplifies developing for Apache Hadoop by providing a unified configuration model and easy to use APIs for using HDFS, MapReduce, Pig, and Hive. You can leverage your existing Java and Spring skills when making the jump to write applications and workflows for Apache Hadoop if you use the &amp;ldquo;Spring for Apache Hadoop&amp;rdquo; project. In this presentation we will see how it can make developing workflows with Map Reduce, Spark, Hive and Pig jobs easier, while providing portability across Apache, Cloudera, Hortonworks, and Pivotal distros. &lt;/p&gt;
&lt;p&gt;We will also show how useful Spring Cloud is when building distributed apps which can be run on Hadoop YARN using centralized configuration, leader election, distributed locks and states.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/xTF3u22eFTI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Building a next-generation cloud e-commerce platform with Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/08/springone2gx-2015-replay-building-a-next-generation-cloud-e-commerce-platform-with-spring" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-03-09:2421</id>
    <updated>2016-03-08T10:35:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenter: Petar Tahchiev&lt;br/&gt;Core Spring Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/boost-your-ecommerce-with-spring"&gt;http://www.slideshare.net/SpringCentral/boost-your-ecommerce-with-spring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What are the common pitfalls we need to be aware of when building an e-commerce application? How do we leverage Spring to tackle the complexity of the project and speed up the development time? How do we scale our spring application in order to support huge amounts of requests? Is it possible to bootstrap an e-commerce website in less than 5 minutes and deploy a production-ready instance to Cloud Foundry? What makes spring the perfect choice for an application framework, and how we have used it to solve our problems when building the Nemesis e-commerce platform. In this presentation we are going to discuss all those topics and we are going to make a real-life demonstration on a typical e-commerce project with the Nemesis platform. We are going to list the problems that every e-commerce application faces and we are going to go through most the projects from the Spring portfolio (Spring DATA, Spring Session, Spring Cloud, Spring Boot, Spring MVC, Spring Security, etc.) and demonstrate what business and technical value Spring brings to our customers. This is not a presentation on one particular Spring project, but instead a demonstration on the whole Spring eco-system, showing how all those projects can be integrated in a single project.&lt;br/&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Nk-u-fv6MTk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Core container refinements in Spring Framework 4.3</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/04/core-container-refinements-in-spring-framework-4-3" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>StÃ©phane Nicoll</name>
    </author>
    <id>tag:spring.io,2016-03-02:2414</id>
    <updated>2016-03-04T13:31:08Z</updated>
    <content type="html">&lt;p&gt;Spring Framework 4.3.RC1 is around the corner and brings nice core container refinements which we are going to explore in this post&amp;hellip;&lt;/p&gt;&lt;h2&gt;&lt;a href="#implicit-constructor-injection-for-single-constructor-scenarios" class="anchor" name="implicit-constructor-injection-for-single-constructor-scenarios"&gt;&lt;/a&gt;Implicit constructor injection for single-constructor scenarios&lt;/h2&gt;
&lt;p&gt;Consider the following service class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Service&#xD;
public class FooService {&#xD;
&#xD;
    private final FooRepository repository;&#xD;
&#xD;
    @Autowired&#xD;
    public FooService(FooRepository repository) {&#xD;
        this.repository = repository&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quite a common use case but if you forget the &lt;code&gt;@Autowired&lt;/code&gt; annotation on the constructor, the container will throw an exception looking for a default constructor, unless you explicitly indicate autowire mode &amp;lsquo;constructor&amp;rsquo; in your bean definition setup (e.g. in an XML &lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So as of 4.3, you no longer need to specify an explicit injection annotation in such a single-constructor scenario. This is particularly elegant for classes which otherwise do not carry any container annotations at all, for example when programmatically registered:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public class FooService {&#xD;
&#xD;
    private final FooRepository repository;&#xD;
&#xD;
    public FooService(FooRepository repository) {&#xD;
        this.repository = repository&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, you may have noticed that &lt;code&gt;@Configuration&lt;/code&gt; classes historically did not support constructor injection. They do now as of 4.3, and they obviously allow for omitting &lt;code&gt;@Autowired&lt;/code&gt; in a single-constructor scenario as well&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
public class FooConfiguration {&#xD;
&#xD;
    private final FooRepository repository;&#xD;
&#xD;
    public FooConfiguration(FooRepository repository) {&#xD;
        this.repository = repository&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    public FooService fooService() {&#xD;
        return new FooService(this.repository);&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#improved-programmatic-resolution-of-dependencies" class="anchor" name="improved-programmatic-resolution-of-dependencies"&gt;&lt;/a&gt;Improved programmatic resolution of dependencies&lt;/h2&gt;
&lt;p&gt;Spring Framework 4.3 also introduces &lt;code&gt;ObjectProvider&lt;/code&gt;, an extension of the existing &lt;code&gt;ObjectFactory&lt;/code&gt; interface with handy signatures such as &lt;code&gt;getIfAvailable&lt;/code&gt; and &lt;code&gt;getIfUnique&lt;/code&gt; to retrieve a bean only if it actually exists (optional support) or if a single candidate can be determined (in particular: a primary candidate in case of multiple matching beans).&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Service&#xD;
public class FooService {&#xD;
&#xD;
    private final FooRepository repository;&#xD;
&#xD;
    public FooService(ObjectProvider&amp;lt;FooRepository&amp;gt; repositoryProvider) {&#xD;
        this.repository = repositoryProvider.getIfUnique();&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may use such an &lt;code&gt;ObjectProvider&lt;/code&gt; handle for custom resolution purposes during initialization as shown above, or store the handle in a field for late on-demand resolution (as you typically do with an &lt;code&gt;ObjectFactory&lt;/code&gt;).&lt;/p&gt;&lt;h2&gt;&lt;a href="#cache-abstraction-refinements" class="anchor" name="cache-abstraction-refinements"&gt;&lt;/a&gt;Cache abstraction refinements&lt;/h2&gt;
&lt;p&gt;The cache abstraction is mainly used to cache values that are CPU and/or IO consuming. In certain use cases, a given key may be requested by several threads (i.e. clients) in parallel, especially on startup. Synchronized cache support is a long-requested feature that has now been implemented. Assume the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Service&#xD;
public class FooService {&#xD;
&#xD;
    @Cacheable(cacheNames = &amp;quot;foos&amp;quot;, sync = true)&#xD;
    public Foo getFoo(String id) { ... }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;sync = true&lt;/code&gt; attribute which tells the framework to block any concurrent threads while the value is being computed. This will make sure that this intensive operation is invoked only once in case of concurrent access.&lt;/p&gt;
&lt;p&gt;BTW, Spring Framework 4.3 now supports &lt;a href="https://github.com/ben-manes/caffeine"&gt;Caffeine&lt;/a&gt;, a Java 8 rewrite of Guavaâs cache meant to supersede Spring&amp;rsquo;s Guava support in Spring Framework 5.&lt;/p&gt;&lt;h2&gt;&lt;a href="#miscellaneous" class="anchor" name="miscellaneous"&gt;&lt;/a&gt;Miscellaneous&lt;/h2&gt;
&lt;p&gt;There are quite a few further core refinements, some of them long desired:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Injection of self references and generically typed &lt;code&gt;Collection&lt;/code&gt;/&lt;code&gt;Map&lt;/code&gt; beans&lt;/li&gt;
  &lt;li&gt;Support for Common Annotations 1.1&amp;rsquo;s &lt;code&gt;javax.annotation.Resource.lookup()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@AliasFor&lt;/code&gt; defaults to the name of the declaring attribute&lt;/li&gt;
  &lt;li&gt;Custom encoding support for &lt;code&gt;@PropertySource&lt;/code&gt; declarations&lt;/li&gt;
  &lt;li&gt;Wider applicability of SpEL expressions (e.g. on &lt;code&gt;@Scheduled&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Framework &lt;code&gt;4.3.0.RC1&lt;/code&gt; is due in late March, with GA scheduled towards the end of May. If you are interested in those features, please give it an early try using the snapshot: the easiest way is to generate a project on &lt;a href="https://start.spring.io"&gt;https://start.spring.io&lt;/a&gt; using Spring Boot &lt;code&gt;1.4.0 (SNAPSHOT)&lt;/code&gt;, bringing the current Spring Framework 4.3 snapshot along with it.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Spring Security Authentication... with Spring Boot and More!</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/03/webinar-spring-security-authentication-with-spring-boot-and-more" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-03-03:2415</id>
    <updated>2016-03-03T10:57:00Z</updated>
    <content type="html">&lt;p&gt;Guest Speaker: Micah Silverman, Stormpath&lt;/p&gt;
&lt;p&gt;In this presentation, Java Developer Evangelist Micah Silverman will go over common pain points with Java authentication and how to solve them using Stormpath, Spring Boot, and Spring Security! By the end of this webinar, youâll be on your way to a fully functioning Spring Boot app with Spring Security and backed by Stormpath.&lt;br/&gt;Topics Covered:&lt;br/&gt;* Stormpath Identity Management&lt;br/&gt;* Authentication Pain Points in Java&lt;br/&gt;* Stormpath + Spring Security + Spring Boot and Your Application&lt;br/&gt;* Quickstart on setting up Spring Security and Spring Boot with a complete user registration and login system&lt;br/&gt;* Advanced Spring Security with Stormpath&lt;br/&gt;* Single Sign-On with Spring Security and Stormpath&amp;rsquo;s IDSite service&lt;br/&gt;* Technical Q&amp;amp;A*&lt;/p&gt;
&lt;p&gt;Thursday, March 10th, 2016 3:00PM London GMT &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMSpringSecurityAuthenticationwithSpringBoot_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Thursday, March 10th, 2016 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMSpringSecurityAuthenticationwithSpringBoot_RegisterSpring.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring IO Platform 2.0.3.RELEASE</title>
    <link rel="alternate" href="https://spring.io/blog/2016/03/02/spring-io-platform-2-0-3-release" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2016-02-29:2404</id>
    <updated>2016-03-02T12:59:43Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Spring IO Platform&lt;/a&gt; 2.0.3.RELEASE is now available from both &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3Aio.spring.platform"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This maintenance release upgrades the versions of a number of the projects in the Platform to pick up their latest maintenance releases:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring AMQP 1.5.4.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Boot 1.3.3.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Data Gosling SR4&lt;/li&gt;
  &lt;li&gt;Spring Framework 4.2.5.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Integration 4.2.5.RELEASE&lt;/li&gt;
  &lt;li&gt;Spring Security OAuth 2.0.9.RELEASE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The versions of several third-party dependencies have also been updated.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/platform/docs/2.0.3.RELEASE/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
</feed>
